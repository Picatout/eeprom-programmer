ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2024,2025  
                                      3 ; This file is part of stm8_ebi 
                                      4 ;
                                      5 ;     stm8_ebi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_ebi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_ebi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;; hardware initialisation
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
                                     22 
                                     23 ;------------------------
                                     24 ; if unified compilation 
                                     25 ; must be first in list 
                                     26 ;-----------------------
                                     27 
                                     28     .module HW_INIT 
                                     29 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     30     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration parameters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5     MAJOR=1
                           000000     6     MINOR=0
                           000000     7     REV=0
                                      8 
                           000010     9     FMSTR=16 ; master clock frequency in Mhz 
                                     10 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     11     .include "inc/stm8s208.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; 2019/10/18
                                     20 ; STM8S208RB µC registers map
                                     21 ; sdas source file
                                     22 ; author: Jacques Deschênes, copyright 2018,2019
                                     23 ; licence: GPLv3
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 	.module stm8s208rb
                                     26 
                                     27 ;;;;;;;;;;;;
                                     28 ; bits
                                     29 ;;;;;;;;;;;;
                           000000    30  BIT0 = 0
                           000001    31  BIT1 = 1
                           000002    32  BIT2 = 2
                           000003    33  BIT3 = 3
                           000004    34  BIT4 = 4
                           000005    35  BIT5 = 5
                           000006    36  BIT6 = 6
                           000007    37  BIT7 = 7
                                     38  	
                                     39 ;;;;;;;;;;;;
                                     40 ; bits masks
                                     41 ;;;;;;;;;;;;
                           000001    42  B0_MASK = (1<<0)
                           000002    43  B1_MASK = (1<<1)
                           000004    44  B2_MASK = (1<<2)
                           000008    45  B3_MASK = (1<<3)
                           000010    46  B4_MASK = (1<<4)
                           000020    47  B5_MASK = (1<<5)
                           000040    48  B6_MASK = (1<<6)
                           000080    49  B7_MASK = (1<<7)
                                     50 
                                     51 ; HSI oscillator frequency 16Mhz
                           F42400    52  FHSI = 16000000
                                     53 ; LSI oscillator frequency 128Khz
                           01F400    54  FLSI = 128000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                                     55 
                                     56 ; controller memory regions
                           001800    57  RAM_SIZE = (0x1800) ; 6KB 
                           000800    58  EEPROM_SIZE = (0x800) ; 2KB
                                     59 ; STM8S208RB have 128K flash
                           020000    60  FLASH_SIZE = (0x20000)
                                     61 ; erase block size 
                           000080    62 BLOCK_SIZE=128 
                                     63 
                           000000    64  RAM_BASE = (0)
                           0017FF    65  RAM_END = (RAM_BASE+RAM_SIZE-1)
                           004000    66  EEPROM_BASE = (0x4000)
                           0047FF    67  EEPROM_END = (EEPROM_BASE+EEPROM_SIZE-1)
                           005000    68  SFR_BASE = (0x5000)
                           0057FF    69  SFR_END = (0x57FF)
                           006000    70  BOOT_ROM_BASE = (0x6000)
                           007FFF    71  BOOT_ROM_END = (0x7fff)
                           008000    72  FLASH_BASE = (0x8000)
                           027FFF    73  FLASH_END = (FLASH_BASE+FLASH_SIZE-1)
                           004800    74  OPTION_BASE = (0x4800)
                           000080    75  OPTION_SIZE = (0x80)
                           00487F    76  OPTION_END = (OPTION_BASE+OPTION_SIZE-1)
                           0048CD    77  DEVID_BASE = (0x48CD)
                           0048D8    78  DEVID_END = (0x48D8)
                           007F00    79  DEBUG_BASE = (0X7F00)
                           007FFF    80  DEBUG_END = (0X7FFF)
                                     81 
                                     82 ; options bytes
                                     83 ; this one can be programmed only from SWIM  (ICP)
                           004800    84  OPT0  = (0x4800)
                                     85 ; these can be programmed at runtime (IAP)
                           004801    86  OPT1  = (0x4801)
                           004802    87  NOPT1  = (0x4802)
                           004803    88  OPT2  = (0x4803)
                           004804    89  NOPT2  = (0x4804)
                           004805    90  OPT3  = (0x4805)
                           004806    91  NOPT3  = (0x4806)
                           004807    92  OPT4  = (0x4807)
                           004808    93  NOPT4  = (0x4808)
                           004809    94  OPT5  = (0x4809)
                           00480A    95  NOPT5  = (0x480A)
                           00480B    96  OPT6  = (0x480B)
                           00480C    97  NOPT6 = (0x480C)
                           00480D    98  OPT7 = (0x480D)
                           00480E    99  NOPT7 = (0x480E)
                           00487E   100  OPTBL  = (0x487E)
                           00487F   101  NOPTBL  = (0x487F)
                                    102 ; option registers usage
                                    103 ; read out protection, value 0xAA enable ROP
                           004800   104  ROP = OPT0  
                                    105 ; user boot code, {0..0x3e} 512 bytes row
                           004801   106  UBC = OPT1
                           004802   107  NUBC = NOPT1
                                    108 ; alternate function register
                           004803   109  AFR = OPT2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                           004804   110  NAFR = NOPT2
                                    111 ; miscelinous options
                           004805   112  WDGOPT = OPT3
                           004806   113  NWDGOPT = NOPT3
                                    114 ; clock options
                           004807   115  CLKOPT = OPT4
                           004808   116  NCLKOPT = NOPT4
                                    117 ; HSE clock startup delay
                           004809   118  HSECNT = OPT5
                           00480A   119  NHSECNT = NOPT5
                                    120 ; flash wait state
                           00480D   121 FLASH_WS = OPT7
                           00480E   122 NFLASH_WS = NOPT7
                                    123 
                                    124 ; watchdog options bits
                           000003   125   WDGOPT_LSIEN   =  BIT3
                           000002   126   WDGOPT_IWDG_HW =  BIT2
                           000001   127   WDGOPT_WWDG_HW =  BIT1
                           000000   128   WDGOPT_WWDG_HALT = BIT0
                                    129 ; NWDGOPT bits
                           FFFFFFFC   130   NWDGOPT_LSIEN    = ~BIT3
                           FFFFFFFD   131   NWDGOPT_IWDG_HW  = ~BIT2
                           FFFFFFFE   132   NWDGOPT_WWDG_HW  = ~BIT1
                           FFFFFFFF   133   NWDGOPT_WWDG_HALT = ~BIT0
                                    134 
                                    135 ; CLKOPT bits
                           000003   136  CLKOPT_EXT_CLK  = BIT3
                           000002   137  CLKOPT_CKAWUSEL = BIT2
                           000001   138  CLKOPT_PRS_C1   = BIT1
                           000000   139  CLKOPT_PRS_C0   = BIT0
                                    140 
                                    141 ; AFR option, remapable functions
                           000007   142  AFR7_BEEP    = BIT7
                           000006   143  AFR6_I2C     = BIT6
                           000005   144  AFR5_TIM1    = BIT5
                           000004   145  AFR4_TIM1    = BIT4
                           000003   146  AFR3_TIM1    = BIT3
                           000002   147  AFR2_CCO     = BIT2
                           000001   148  AFR1_TIM2    = BIT1
                           000000   149  AFR0_ADC     = BIT0
                                    150 
                                    151 ; device ID = (read only)
                           0048CD   152  DEVID_XL  = (0x48CD)
                           0048CE   153  DEVID_XH  = (0x48CE)
                           0048CF   154  DEVID_YL  = (0x48CF)
                           0048D0   155  DEVID_YH  = (0x48D0)
                           0048D1   156  DEVID_WAF  = (0x48D1)
                           0048D2   157  DEVID_LOT0  = (0x48D2)
                           0048D3   158  DEVID_LOT1  = (0x48D3)
                           0048D4   159  DEVID_LOT2  = (0x48D4)
                           0048D5   160  DEVID_LOT3  = (0x48D5)
                           0048D6   161  DEVID_LOT4  = (0x48D6)
                           0048D7   162  DEVID_LOT5  = (0x48D7)
                           0048D8   163  DEVID_LOT6  = (0x48D8)
                                    164 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                    165 
                           005000   166 GPIO_BASE = (0x5000)
                           000005   167 GPIO_SIZE = (5)
                                    168 ; PORTS SFR OFFSET
                           000000   169 PA = 0
                           000005   170 PB = 5
                           00000A   171 PC = 10
                           00000F   172 PD = 15
                           000014   173 PE = 20
                           000019   174 PF = 25
                           00001E   175 PG = 30
                           000023   176 PH = 35 
                           000028   177 PI = 40 
                                    178 
                                    179 ; GPIO
                                    180 ; gpio register offset to base
                           000000   181  GPIO_ODR = 0
                           000001   182  GPIO_IDR = 1
                           000002   183  GPIO_DDR = 2
                           000003   184  GPIO_CR1 = 3
                           000004   185  GPIO_CR2 = 4
                           005000   186  GPIO_BASE=(0X5000)
                                    187  
                                    188 ; port A
                           005000   189  PA_BASE = (0X5000)
                           005000   190  PA_ODR  = (0x5000)
                           005001   191  PA_IDR  = (0x5001)
                           005002   192  PA_DDR  = (0x5002)
                           005003   193  PA_CR1  = (0x5003)
                           005004   194  PA_CR2  = (0x5004)
                                    195 ; port B
                           005005   196  PB_BASE = (0X5005)
                           005005   197  PB_ODR  = (0x5005)
                           005006   198  PB_IDR  = (0x5006)
                           005007   199  PB_DDR  = (0x5007)
                           005008   200  PB_CR1  = (0x5008)
                           005009   201  PB_CR2  = (0x5009)
                                    202 ; port C
                           00500A   203  PC_BASE = (0X500A)
                           00500A   204  PC_ODR  = (0x500A)
                           00500B   205  PC_IDR  = (0x500B)
                           00500C   206  PC_DDR  = (0x500C)
                           00500D   207  PC_CR1  = (0x500D)
                           00500E   208  PC_CR2  = (0x500E)
                                    209 ; port D
                           00500F   210  PD_BASE = (0X500F)
                           00500F   211  PD_ODR  = (0x500F)
                           005010   212  PD_IDR  = (0x5010)
                           005011   213  PD_DDR  = (0x5011)
                           005012   214  PD_CR1  = (0x5012)
                           005013   215  PD_CR2  = (0x5013)
                                    216 ; port E
                           005014   217  PE_BASE = (0X5014)
                           005014   218  PE_ODR  = (0x5014)
                           005015   219  PE_IDR  = (0x5015)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                           005016   220  PE_DDR  = (0x5016)
                           005017   221  PE_CR1  = (0x5017)
                           005018   222  PE_CR2  = (0x5018)
                                    223 ; port F
                           005019   224  PF_BASE = (0X5019)
                           005019   225  PF_ODR  = (0x5019)
                           00501A   226  PF_IDR  = (0x501A)
                           00501B   227  PF_DDR  = (0x501B)
                           00501C   228  PF_CR1  = (0x501C)
                           00501D   229  PF_CR2  = (0x501D)
                                    230 ; port G
                           00501E   231  PG_BASE = (0X501E)
                           00501E   232  PG_ODR  = (0x501E)
                           00501F   233  PG_IDR  = (0x501F)
                           005020   234  PG_DDR  = (0x5020)
                           005021   235  PG_CR1  = (0x5021)
                           005022   236  PG_CR2  = (0x5022)
                                    237 ; port H not present on LQFP48/LQFP64 package
                           005023   238  PH_BASE = (0X5023)
                           005023   239  PH_ODR  = (0x5023)
                           005024   240  PH_IDR  = (0x5024)
                           005025   241  PH_DDR  = (0x5025)
                           005026   242  PH_CR1  = (0x5026)
                           005027   243  PH_CR2  = (0x5027)
                                    244 ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                           005028   245  PI_BASE = (0X5028)
                           005028   246  PI_ODR  = (0x5028)
                           005029   247  PI_IDR  = (0x5029)
                           00502A   248  PI_DDR  = (0x502a)
                           00502B   249  PI_CR1  = (0x502b)
                           00502C   250  PI_CR2  = (0x502c)
                                    251 
                                    252 ; input modes CR1
                           000000   253  INPUT_FLOAT = (0) ; no pullup resistor
                           000001   254  INPUT_PULLUP = (1)
                                    255 ; output mode CR1
                           000000   256  OUTPUT_OD = (0) ; open drain
                           000001   257  OUTPUT_PP = (1) ; push pull
                                    258 ; input modes CR2
                           000000   259  INPUT_DI = (0)
                           000001   260  INPUT_EI = (1)
                                    261 ; output speed CR2
                           000000   262  OUTPUT_SLOW = (0)
                           000001   263  OUTPUT_FAST = (1)
                                    264 
                                    265 
                                    266 ; Flash memory
                           000080   267  BLOCK_SIZE=128 
                           00505A   268  FLASH_CR1  = (0x505A)
                           00505B   269  FLASH_CR2  = (0x505B)
                           00505C   270  FLASH_NCR2  = (0x505C)
                           00505D   271  FLASH_FPR  = (0x505D)
                           00505E   272  FLASH_NFPR  = (0x505E)
                           00505F   273  FLASH_IAPSR  = (0x505F)
                           005062   274  FLASH_PUKR  = (0x5062)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                           005064   275  FLASH_DUKR  = (0x5064)
                                    276 ; data memory unlock keys
                           0000AE   277  FLASH_DUKR_KEY1 = (0xae)
                           000056   278  FLASH_DUKR_KEY2 = (0x56)
                                    279 ; flash memory unlock keys
                           000056   280  FLASH_PUKR_KEY1 = (0x56)
                           0000AE   281  FLASH_PUKR_KEY2 = (0xae)
                                    282 ; FLASH_CR1 bits
                           000003   283  FLASH_CR1_HALT = BIT3
                           000002   284  FLASH_CR1_AHALT = BIT2
                           000001   285  FLASH_CR1_IE = BIT1
                           000000   286  FLASH_CR1_FIX = BIT0
                                    287 ; FLASH_CR2 bits
                           000007   288  FLASH_CR2_OPT = BIT7
                           000006   289  FLASH_CR2_WPRG = BIT6
                           000005   290  FLASH_CR2_ERASE = BIT5
                           000004   291  FLASH_CR2_FPRG = BIT4
                           000000   292  FLASH_CR2_PRG = BIT0
                                    293 ; FLASH_FPR bits
                           000005   294  FLASH_FPR_WPB5 = BIT5
                           000004   295  FLASH_FPR_WPB4 = BIT4
                           000003   296  FLASH_FPR_WPB3 = BIT3
                           000002   297  FLASH_FPR_WPB2 = BIT2
                           000001   298  FLASH_FPR_WPB1 = BIT1
                           000000   299  FLASH_FPR_WPB0 = BIT0
                                    300 ; FLASH_NFPR bits
                           000005   301  FLASH_NFPR_NWPB5 = BIT5
                           000004   302  FLASH_NFPR_NWPB4 = BIT4
                           000003   303  FLASH_NFPR_NWPB3 = BIT3
                           000002   304  FLASH_NFPR_NWPB2 = BIT2
                           000001   305  FLASH_NFPR_NWPB1 = BIT1
                           000000   306  FLASH_NFPR_NWPB0 = BIT0
                                    307 ; FLASH_IAPSR bits
                           000006   308  FLASH_IAPSR_HVOFF = BIT6
                           000003   309  FLASH_IAPSR_DUL = BIT3
                           000002   310  FLASH_IAPSR_EOP = BIT2
                           000001   311  FLASH_IAPSR_PUL = BIT1
                           000000   312  FLASH_IAPSR_WR_PG_DIS = BIT0
                                    313 
                                    314 ; Interrupt control
                           0050A0   315  EXTI_CR1  = (0x50A0)
                           0050A1   316  EXTI_CR2  = (0x50A1)
                                    317 
                                    318 ; Reset Status
                           0050B3   319  RST_SR  = (0x50B3)
                                    320 
                                    321 ; Clock Registers
                           0050C0   322  CLK_ICKR  = (0x50c0)
                           0050C1   323  CLK_ECKR  = (0x50c1)
                           0050C3   324  CLK_CMSR  = (0x50C3)
                           0050C4   325  CLK_SWR  = (0x50C4)
                           0050C5   326  CLK_SWCR  = (0x50C5)
                           0050C6   327  CLK_CKDIVR  = (0x50C6)
                           0050C7   328  CLK_PCKENR1  = (0x50C7)
                           0050C8   329  CLK_CSSR  = (0x50C8)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                           0050C9   330  CLK_CCOR  = (0x50C9)
                           0050CA   331  CLK_PCKENR2  = (0x50CA)
                           0050CC   332  CLK_HSITRIMR  = (0x50CC)
                           0050CD   333  CLK_SWIMCCR  = (0x50CD)
                                    334 
                                    335 ; Peripherals clock gating
                                    336 ; CLK_PCKENR1 
                           000007   337  CLK_PCKENR1_TIM1 = (7)
                           000006   338  CLK_PCKENR1_TIM3 = (6)
                           000005   339  CLK_PCKENR1_TIM2 = (5)
                           000004   340  CLK_PCKENR1_TIM4 = (4)
                           000003   341  CLK_PCKENR1_UART3 = (3)
                           000002   342  CLK_PCKENR1_UART1 = (2)
                           000001   343  CLK_PCKENR1_SPI = (1)
                           000000   344  CLK_PCKENR1_I2C = (0)
                                    345 ; CLK_PCKENR2
                           000007   346  CLK_PCKENR2_CAN = (7)
                           000003   347  CLK_PCKENR2_ADC = (3)
                           000002   348  CLK_PCKENR2_AWU = (2)
                                    349 
                                    350 ; Clock bits
                           000005   351  CLK_ICKR_REGAH = (5)
                           000004   352  CLK_ICKR_LSIRDY = (4)
                           000003   353  CLK_ICKR_LSIEN = (3)
                           000002   354  CLK_ICKR_FHW = (2)
                           000001   355  CLK_ICKR_HSIRDY = (1)
                           000000   356  CLK_ICKR_HSIEN = (0)
                                    357 
                           000001   358  CLK_ECKR_HSERDY = (1)
                           000000   359  CLK_ECKR_HSEEN = (0)
                                    360 ; clock source
                           0000E1   361  CLK_SWR_HSI = 0xE1
                           0000D2   362  CLK_SWR_LSI = 0xD2
                           0000B4   363  CLK_SWR_HSE = 0xB4
                                    364 
                           000003   365  CLK_SWCR_SWIF = (3)
                           000002   366  CLK_SWCR_SWIEN = (2)
                           000001   367  CLK_SWCR_SWEN = (1)
                           000000   368  CLK_SWCR_SWBSY = (0)
                                    369 
                           000004   370  CLK_CKDIVR_HSIDIV1 = (4)
                           000003   371  CLK_CKDIVR_HSIDIV0 = (3)
                           000002   372  CLK_CKDIVR_CPUDIV2 = (2)
                           000001   373  CLK_CKDIVR_CPUDIV1 = (1)
                           000000   374  CLK_CKDIVR_CPUDIV0 = (0)
                                    375 
                                    376 ; Watchdog
                           0050D1   377  WWDG_CR  = (0x50D1)
                           0050D2   378  WWDG_WR  = (0x50D2)
                           0050E0   379  IWDG_KR  = (0x50E0)
                           0050E1   380  IWDG_PR  = (0x50E1)
                           0050E2   381  IWDG_RLR  = (0x50E2)
                           0000CC   382  IWDG_KEY_ENABLE = 0xCC  ; enable IWDG key 
                           0000AA   383  IWDG_KEY_REFRESH = 0xAA ; refresh counter key 
                           000055   384  IWDG_KEY_ACCESS = 0x55 ; write register key 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                                    385  
                           0050F0   386  AWU_CSR  = (0x50F0)
                           0050F1   387  AWU_APR  = (0x50F1)
                           0050F2   388  AWU_TBR  = (0x50F2)
                           000004   389  AWU_CSR_AWUEN = 4
                                    390 
                                    391 
                                    392 
                                    393 ; Beeper
                                    394 ; beeper output is alternate function AFR7 on PD4
                                    395 ; connected to CN9-6
                           0050F3   396  BEEP_CSR  = (0x50F3)
                           00000F   397  BEEP_PORT = PD
                           000004   398  BEEP_BIT = 4
                           000010   399  BEEP_MASK = B4_MASK
                                    400 
                                    401 ; SPI
                           005200   402  SPI_CR1  = (0x5200)
                           005201   403  SPI_CR2  = (0x5201)
                           005202   404  SPI_ICR  = (0x5202)
                           005203   405  SPI_SR  = (0x5203)
                           005204   406  SPI_DR  = (0x5204)
                           005205   407  SPI_CRCPR  = (0x5205)
                           005206   408  SPI_RXCRCR  = (0x5206)
                           005207   409  SPI_TXCRCR  = (0x5207)
                                    410 
                                    411 ; SPI_CR1 bit fields 
                           000000   412   SPI_CR1_CPHA=0
                           000001   413   SPI_CR1_CPOL=1
                           000002   414   SPI_CR1_MSTR=2
                           000003   415   SPI_CR1_BR=3
                           000006   416   SPI_CR1_SPE=6
                           000007   417   SPI_CR1_LSBFIRST=7
                                    418   
                                    419 ; SPI_CR2 bit fields 
                           000000   420   SPI_CR2_SSI=0
                           000001   421   SPI_CR2_SSM=1
                           000002   422   SPI_CR2_RXONLY=2
                           000004   423   SPI_CR2_CRCNEXT=4
                           000005   424   SPI_CR2_CRCEN=5
                           000006   425   SPI_CR2_BDOE=6
                           000007   426   SPI_CR2_BDM=7  
                                    427 
                                    428 ; SPI_SR bit fields 
                           000000   429   SPI_SR_RXNE=0
                           000001   430   SPI_SR_TXE=1
                           000003   431   SPI_SR_WKUP=3
                           000004   432   SPI_SR_CRCERR=4
                           000005   433   SPI_SR_MODF=5
                           000006   434   SPI_SR_OVR=6
                           000007   435   SPI_SR_BSY=7
                                    436 
                                    437 ; I2C
                           005210   438  I2C_BASE_ADDR = 0x5210 
                           005210   439  I2C_CR1  = (0x5210)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                           005211   440  I2C_CR2  = (0x5211)
                           005212   441  I2C_FREQR  = (0x5212)
                           005213   442  I2C_OARL  = (0x5213)
                           005214   443  I2C_OARH  = (0x5214)
                           005216   444  I2C_DR  = (0x5216)
                           005217   445  I2C_SR1  = (0x5217)
                           005218   446  I2C_SR2  = (0x5218)
                           005219   447  I2C_SR3  = (0x5219)
                           00521A   448  I2C_ITR  = (0x521A)
                           00521B   449  I2C_CCRL  = (0x521B)
                           00521C   450  I2C_CCRH  = (0x521C)
                           00521D   451  I2C_TRISER  = (0x521D)
                           00521E   452  I2C_PECR  = (0x521E)
                                    453 
                           000007   454  I2C_CR1_NOSTRETCH = (7)
                           000006   455  I2C_CR1_ENGC = (6)
                           000000   456  I2C_CR1_PE = (0)
                                    457 
                           000007   458  I2C_CR2_SWRST = (7)
                           000003   459  I2C_CR2_POS = (3)
                           000002   460  I2C_CR2_ACK = (2)
                           000001   461  I2C_CR2_STOP = (1)
                           000000   462  I2C_CR2_START = (0)
                                    463 
                           000000   464  I2C_OARL_ADD0 = (0)
                                    465 
                           000009   466  I2C_OAR_ADDR_7BIT = ((I2C_OARL & 0xFE) >> 1)
                           000813   467  I2C_OAR_ADDR_10BIT = (((I2C_OARH & 0x06) << 9) | (I2C_OARL & 0xFF))
                                    468 
                           000007   469  I2C_OARH_ADDMODE = (7)
                           000006   470  I2C_OARH_ADDCONF = (6)
                           000002   471  I2C_OARH_ADD9 = (2)
                           000001   472  I2C_OARH_ADD8 = (1)
                                    473 
                           000007   474  I2C_SR1_TXE = (7)
                           000006   475  I2C_SR1_RXNE = (6)
                           000004   476  I2C_SR1_STOPF = (4)
                           000003   477  I2C_SR1_ADD10 = (3)
                           000002   478  I2C_SR1_BTF = (2)
                           000001   479  I2C_SR1_ADDR = (1)
                           000000   480  I2C_SR1_SB = (0)
                                    481 
                           000005   482  I2C_SR2_WUFH = (5)
                           000003   483  I2C_SR2_OVR = (3)
                           000002   484  I2C_SR2_AF = (2)
                           000001   485  I2C_SR2_ARLO = (1)
                           000000   486  I2C_SR2_BERR = (0)
                                    487 
                           000007   488  I2C_SR3_DUALF = (7)
                           000004   489  I2C_SR3_GENCALL = (4)
                           000002   490  I2C_SR3_TRA = (2)
                           000001   491  I2C_SR3_BUSY = (1)
                           000000   492  I2C_SR3_MSL = (0)
                                    493 
                           000002   494  I2C_ITR_ITBUFEN = (2)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                           000001   495  I2C_ITR_ITEVTEN = (1)
                           000000   496  I2C_ITR_ITERREN = (0)
                                    497 
                           000007   498  I2C_CCRH_FAST = 7 
                           000006   499  I2C_CCRH_DUTY = 6 
                                    500  
                                    501 ; Precalculated values, all in KHz
                           000080   502  I2C_CCRH_16MHZ_FAST_400 = 0x80
                           00000D   503  I2C_CCRL_16MHZ_FAST_400 = 0x0D
                                    504 ;
                                    505 ; Fast I2C mode max rise time = 300ns
                                    506 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    507 ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                    508 
                           000005   509  I2C_TRISER_16MHZ_FAST_400 = 0x05
                                    510 
                           0000C0   511  I2C_CCRH_16MHZ_FAST_320 = 0xC0
                           000002   512  I2C_CCRL_16MHZ_FAST_320 = 0x02
                           000005   513  I2C_TRISER_16MHZ_FAST_320 = 0x05
                                    514 
                           000080   515  I2C_CCRH_16MHZ_FAST_200 = 0x80
                           00001A   516  I2C_CCRL_16MHZ_FAST_200 = 0x1A
                           000005   517  I2C_TRISER_16MHZ_FAST_200 = 0x05
                                    518 
                           000000   519  I2C_CCRH_16MHZ_STD_100 = 0x00
                           000050   520  I2C_CCRL_16MHZ_STD_100 = 0x50
                                    521 ;
                                    522 ; Standard I2C mode max rise time = 1000ns
                                    523 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    524 ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                    525 
                           000011   526  I2C_TRISER_16MHZ_STD_100 = 0x11
                                    527 
                           000000   528  I2C_CCRH_16MHZ_STD_50 = 0x00
                           0000A0   529  I2C_CCRL_16MHZ_STD_50 = 0xA0
                           000011   530  I2C_TRISER_16MHZ_STD_50 = 0x11
                                    531 
                           000001   532  I2C_CCRH_16MHZ_STD_20 = 0x01
                           000090   533  I2C_CCRL_16MHZ_STD_20 = 0x90
                           000011   534  I2C_TRISER_16MHZ_STD_20 = 0x11;
                                    535 
                           000001   536  I2C_READ = 1
                           000000   537  I2C_WRITE = 0
                                    538 
                                    539 ; baudrate constant for brr_value table access
                                    540 ; to be used by uart_init 
                           000000   541 B2400=0
                           000001   542 B4800=1
                           000002   543 B9600=2
                           000003   544 B19200=3
                           000004   545 B38400=4
                           000005   546 B57600=5
                           000006   547 B115200=6
                           000007   548 B230400=7
                           000008   549 B460800=8
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                           000009   550 B921600=9
                                    551 
                                    552 ; UART registers offset from
                                    553 ; base address 
                           000000   554 OFS_UART_SR=0
                           000001   555 OFS_UART_DR=1
                           000002   556 OFS_UART_BRR1=2
                           000003   557 OFS_UART_BRR2=3
                           000004   558 OFS_UART_CR1=4
                           000005   559 OFS_UART_CR2=5
                           000006   560 OFS_UART_CR3=6
                           000007   561 OFS_UART_CR4=7
                           000008   562 OFS_UART_CR5=8
                           000009   563 OFS_UART_CR6=9
                           000009   564 OFS_UART_GTR=9
                           00000A   565 OFS_UART_PSCR=10
                                    566 
                                    567 ; uart identifier
                           000000   568  UART1 = 0 
                           000001   569  UART2 = 1
                           000002   570  UART3 = 2
                                    571 
                                    572 ; pins used by uart 
                           000005   573 UART1_TX_PIN=BIT5
                           000004   574 UART1_RX_PIN=BIT4
                           000005   575 UART3_TX_PIN=BIT5
                           000006   576 UART3_RX_PIN=BIT6
                                    577 ; uart port base address 
                           000000   578 UART1_PORT=PA 
                           00000F   579 UART3_PORT=PD
                                    580 
                                    581 ; UART1 
                           005230   582  UART1_BASE  = (0x5230)
                           005230   583  UART1_SR    = (0x5230)
                           005231   584  UART1_DR    = (0x5231)
                           005232   585  UART1_BRR1  = (0x5232)
                           005233   586  UART1_BRR2  = (0x5233)
                           005234   587  UART1_CR1   = (0x5234)
                           005235   588  UART1_CR2   = (0x5235)
                           005236   589  UART1_CR3   = (0x5236)
                           005237   590  UART1_CR4   = (0x5237)
                           005238   591  UART1_CR5   = (0x5238)
                           005239   592  UART1_GTR   = (0x5239)
                           00523A   593  UART1_PSCR  = (0x523A)
                                    594 
                                    595 ; UART3
                           005240   596  UART3_BASE  = (0x5240)
                           005240   597  UART3_SR    = (0x5240)
                           005241   598  UART3_DR    = (0x5241)
                           005242   599  UART3_BRR1  = (0x5242)
                           005243   600  UART3_BRR2  = (0x5243)
                           005244   601  UART3_CR1   = (0x5244)
                           005245   602  UART3_CR2   = (0x5245)
                           005246   603  UART3_CR3   = (0x5246)
                           005247   604  UART3_CR4   = (0x5247)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                           004249   605  UART3_CR6   = (0x4249)
                                    606 
                                    607 ; UART Status Register bits
                           000007   608  UART_SR_TXE = (7)
                           000006   609  UART_SR_TC = (6)
                           000005   610  UART_SR_RXNE = (5)
                           000004   611  UART_SR_IDLE = (4)
                           000003   612  UART_SR_OR = (3)
                           000002   613  UART_SR_NF = (2)
                           000001   614  UART_SR_FE = (1)
                           000000   615  UART_SR_PE = (0)
                                    616 
                                    617 ; Uart Control Register bits
                           000007   618  UART_CR1_R8 = (7)
                           000006   619  UART_CR1_T8 = (6)
                           000005   620  UART_CR1_UARTD = (5)
                           000004   621  UART_CR1_M = (4)
                           000003   622  UART_CR1_WAKE = (3)
                           000002   623  UART_CR1_PCEN = (2)
                           000001   624  UART_CR1_PS = (1)
                           000000   625  UART_CR1_PIEN = (0)
                                    626 
                           000007   627  UART_CR2_TIEN = (7)
                           000006   628  UART_CR2_TCIEN = (6)
                           000005   629  UART_CR2_RIEN = (5)
                           000004   630  UART_CR2_ILIEN = (4)
                           000003   631  UART_CR2_TEN = (3)
                           000002   632  UART_CR2_REN = (2)
                           000001   633  UART_CR2_RWU = (1)
                           000000   634  UART_CR2_SBK = (0)
                                    635 
                           000006   636  UART_CR3_LINEN = (6)
                           000005   637  UART_CR3_STOP1 = (5)
                           000004   638  UART_CR3_STOP0 = (4)
                           000003   639  UART_CR3_CLKEN = (3)
                           000002   640  UART_CR3_CPOL = (2)
                           000001   641  UART_CR3_CPHA = (1)
                           000000   642  UART_CR3_LBCL = (0)
                                    643 
                           000006   644  UART_CR4_LBDIEN = (6)
                           000005   645  UART_CR4_LBDL = (5)
                           000004   646  UART_CR4_LBDF = (4)
                           000003   647  UART_CR4_ADD3 = (3)
                           000002   648  UART_CR4_ADD2 = (2)
                           000001   649  UART_CR4_ADD1 = (1)
                           000000   650  UART_CR4_ADD0 = (0)
                                    651 
                           000005   652  UART_CR5_SCEN = (5)
                           000004   653  UART_CR5_NACK = (4)
                           000003   654  UART_CR5_HDSEL = (3)
                           000002   655  UART_CR5_IRLP = (2)
                           000001   656  UART_CR5_IREN = (1)
                                    657 ; LIN mode config register
                           000007   658  UART_CR6_LDUM = (7)
                           000005   659  UART_CR6_LSLV = (5)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



                           000004   660  UART_CR6_LASE = (4)
                           000002   661  UART_CR6_LHDIEN = (2) 
                           000001   662  UART_CR6_LHDF = (1)
                           000000   663  UART_CR6_LSF = (0)
                                    664 
                                    665 ; TIMERS
                                    666 ; Timer 1 - 16-bit timer with complementary PWM outputs
                           005250   667  TIM1_CR1  = (0x5250)
                           005251   668  TIM1_CR2  = (0x5251)
                           005252   669  TIM1_SMCR  = (0x5252)
                           005253   670  TIM1_ETR  = (0x5253)
                           005254   671  TIM1_IER  = (0x5254)
                           005255   672  TIM1_SR1  = (0x5255)
                           005256   673  TIM1_SR2  = (0x5256)
                           005257   674  TIM1_EGR  = (0x5257)
                           005258   675  TIM1_CCMR1  = (0x5258)
                           005259   676  TIM1_CCMR2  = (0x5259)
                           00525A   677  TIM1_CCMR3  = (0x525A)
                           00525B   678  TIM1_CCMR4  = (0x525B)
                           00525C   679  TIM1_CCER1  = (0x525C)
                           00525D   680  TIM1_CCER2  = (0x525D)
                           00525E   681  TIM1_CNTRH  = (0x525E)
                           00525F   682  TIM1_CNTRL  = (0x525F)
                           005260   683  TIM1_PSCRH  = (0x5260)
                           005261   684  TIM1_PSCRL  = (0x5261)
                           005262   685  TIM1_ARRH  = (0x5262)
                           005263   686  TIM1_ARRL  = (0x5263)
                           005264   687  TIM1_RCR  = (0x5264)
                           005265   688  TIM1_CCR1H  = (0x5265)
                           005266   689  TIM1_CCR1L  = (0x5266)
                           005267   690  TIM1_CCR2H  = (0x5267)
                           005268   691  TIM1_CCR2L  = (0x5268)
                           005269   692  TIM1_CCR3H  = (0x5269)
                           00526A   693  TIM1_CCR3L  = (0x526A)
                           00526B   694  TIM1_CCR4H  = (0x526B)
                           00526C   695  TIM1_CCR4L  = (0x526C)
                           00526D   696  TIM1_BKR  = (0x526D)
                           00526E   697  TIM1_DTR  = (0x526E)
                           00526F   698  TIM1_OISR  = (0x526F)
                                    699 
                                    700 ; Timer Control Register bits
                           000007   701  TIM_CR1_ARPE = (7)
                           000006   702  TIM_CR1_CMSH = (6)
                           000005   703  TIM_CR1_CMSL = (5)
                           000004   704  TIM_CR1_DIR = (4)
                           000003   705  TIM_CR1_OPM = (3)
                           000002   706  TIM_CR1_URS = (2)
                           000001   707  TIM_CR1_UDIS = (1)
                           000000   708  TIM_CR1_CEN = (0)
                                    709 
                           000006   710  TIM1_CR2_MMS2 = (6)
                           000005   711  TIM1_CR2_MMS1 = (5)
                           000004   712  TIM1_CR2_MMS0 = (4)
                           000002   713  TIM1_CR2_COMS = (2)
                           000000   714  TIM1_CR2_CCPC = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                                    715 
                                    716 ; Timer Slave Mode Control bits
                           000007   717  TIM1_SMCR_MSM = (7)
                           000006   718  TIM1_SMCR_TS2 = (6)
                           000005   719  TIM1_SMCR_TS1 = (5)
                           000004   720  TIM1_SMCR_TS0 = (4)
                           000002   721  TIM1_SMCR_SMS2 = (2)
                           000001   722  TIM1_SMCR_SMS1 = (1)
                           000000   723  TIM1_SMCR_SMS0 = (0)
                                    724 
                                    725 ; Timer External Trigger Enable bits
                           000007   726  TIM1_ETR_ETP = (7)
                           000006   727  TIM1_ETR_ECE = (6)
                           000005   728  TIM1_ETR_ETPS1 = (5)
                           000004   729  TIM1_ETR_ETPS0 = (4)
                           000003   730  TIM1_ETR_ETF3 = (3)
                           000002   731  TIM1_ETR_ETF2 = (2)
                           000001   732  TIM1_ETR_ETF1 = (1)
                           000000   733  TIM1_ETR_ETF0 = (0)
                                    734 
                                    735 ; Timer Interrupt Enable bits
                           000007   736  TIM1_IER_BIE = (7)
                           000006   737  TIM1_IER_TIE = (6)
                           000005   738  TIM1_IER_COMIE = (5)
                           000004   739  TIM1_IER_CC4IE = (4)
                           000003   740  TIM1_IER_CC3IE = (3)
                           000002   741  TIM1_IER_CC2IE = (2)
                           000001   742  TIM1_IER_CC1IE = (1)
                           000000   743  TIM1_IER_UIE = (0)
                                    744 
                                    745 ; Timer Status Register bits
                           000007   746  TIM1_SR1_BIF = (7)
                           000006   747  TIM1_SR1_TIF = (6)
                           000005   748  TIM1_SR1_COMIF = (5)
                           000004   749  TIM1_SR1_CC4IF = (4)
                           000003   750  TIM1_SR1_CC3IF = (3)
                           000002   751  TIM1_SR1_CC2IF = (2)
                           000001   752  TIM1_SR1_CC1IF = (1)
                           000000   753  TIM1_SR1_UIF = (0)
                                    754 
                           000004   755  TIM1_SR2_CC4OF = (4)
                           000003   756  TIM1_SR2_CC3OF = (3)
                           000002   757  TIM1_SR2_CC2OF = (2)
                           000001   758  TIM1_SR2_CC1OF = (1)
                                    759 
                                    760 ; Timer Event Generation Register bits
                           000007   761  TIM1_EGR_BG = (7)
                           000006   762  TIM1_EGR_TG = (6)
                           000005   763  TIM1_EGR_COMG = (5)
                           000004   764  TIM1_EGR_CC4G = (4)
                           000003   765  TIM1_EGR_CC3G = (3)
                           000002   766  TIM1_EGR_CC2G = (2)
                           000001   767  TIM1_EGR_CC1G = (1)
                           000000   768  TIM1_EGR_UG = (0)
                                    769 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                                    770 ; Capture/Compare Mode Register 1 - channel configured in output
                           000007   771  TIM1_CCMR1_OC1CE = (7)
                           000006   772  TIM1_CCMR1_OC1M2 = (6)
                           000005   773  TIM1_CCMR1_OC1M1 = (5)
                           000004   774  TIM1_CCMR1_OC1M0 = (4)
                           000003   775  TIM1_CCMR1_OC1PE = (3)
                           000002   776  TIM1_CCMR1_OC1FE = (2)
                           000001   777  TIM1_CCMR1_CC1S1 = (1)
                           000000   778  TIM1_CCMR1_CC1S0 = (0)
                                    779 
                                    780 ; Capture/Compare Mode Register 1 - channel configured in input
                           000007   781  TIM1_CCMR1_IC1F3 = (7)
                           000006   782  TIM1_CCMR1_IC1F2 = (6)
                           000005   783  TIM1_CCMR1_IC1F1 = (5)
                           000004   784  TIM1_CCMR1_IC1F0 = (4)
                           000003   785  TIM1_CCMR1_IC1PSC1 = (3)
                           000002   786  TIM1_CCMR1_IC1PSC0 = (2)
                                    787 ;  TIM1_CCMR1_CC1S1 = (1)
                           000000   788  TIM1_CCMR1_CC1S0 = (0)
                                    789 
                                    790 ; Capture/Compare Mode Register 2 - channel configured in output
                           000007   791  TIM1_CCMR2_OC2CE = (7)
                           000006   792  TIM1_CCMR2_OC2M2 = (6)
                           000005   793  TIM1_CCMR2_OC2M1 = (5)
                           000004   794  TIM1_CCMR2_OC2M0 = (4)
                           000003   795  TIM1_CCMR2_OC2PE = (3)
                           000002   796  TIM1_CCMR2_OC2FE = (2)
                           000001   797  TIM1_CCMR2_CC2S1 = (1)
                           000000   798  TIM1_CCMR2_CC2S0 = (0)
                                    799 
                                    800 ; Capture/Compare Mode Register 2 - channel configured in input
                           000007   801  TIM1_CCMR2_IC2F3 = (7)
                           000006   802  TIM1_CCMR2_IC2F2 = (6)
                           000005   803  TIM1_CCMR2_IC2F1 = (5)
                           000004   804  TIM1_CCMR2_IC2F0 = (4)
                           000003   805  TIM1_CCMR2_IC2PSC1 = (3)
                           000002   806  TIM1_CCMR2_IC2PSC0 = (2)
                                    807 ;  TIM1_CCMR2_CC2S1 = (1)
                           000000   808  TIM1_CCMR2_CC2S0 = (0)
                                    809 
                                    810 ; Capture/Compare Mode Register 3 - channel configured in output
                           000007   811  TIM1_CCMR3_OC3CE = (7)
                           000006   812  TIM1_CCMR3_OC3M2 = (6)
                           000005   813  TIM1_CCMR3_OC3M1 = (5)
                           000004   814  TIM1_CCMR3_OC3M0 = (4)
                           000003   815  TIM1_CCMR3_OC3PE = (3)
                           000002   816  TIM1_CCMR3_OC3FE = (2)
                           000001   817  TIM1_CCMR3_CC3S1 = (1)
                           000000   818  TIM1_CCMR3_CC3S0 = (0)
                                    819 
                                    820 ; Capture/Compare Mode Register 3 - channel configured in input
                           000007   821  TIM1_CCMR3_IC3F3 = (7)
                           000006   822  TIM1_CCMR3_IC3F2 = (6)
                           000005   823  TIM1_CCMR3_IC3F1 = (5)
                           000004   824  TIM1_CCMR3_IC3F0 = (4)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                           000003   825  TIM1_CCMR3_IC3PSC1 = (3)
                           000002   826  TIM1_CCMR3_IC3PSC0 = (2)
                                    827 ;  TIM1_CCMR3_CC3S1 = (1)
                           000000   828  TIM1_CCMR3_CC3S0 = (0)
                                    829 
                                    830 ; Capture/Compare Mode Register 4 - channel configured in output
                           000007   831  TIM1_CCMR4_OC4CE = (7)
                           000006   832  TIM1_CCMR4_OC4M2 = (6)
                           000005   833  TIM1_CCMR4_OC4M1 = (5)
                           000004   834  TIM1_CCMR4_OC4M0 = (4)
                           000003   835  TIM1_CCMR4_OC4PE = (3)
                           000002   836  TIM1_CCMR4_OC4FE = (2)
                           000001   837  TIM1_CCMR4_CC4S1 = (1)
                           000000   838  TIM1_CCMR4_CC4S0 = (0)
                                    839 
                                    840 ; Capture/Compare Mode Register 4 - channel configured in input
                           000007   841  TIM1_CCMR4_IC4F3 = (7)
                           000006   842  TIM1_CCMR4_IC4F2 = (6)
                           000005   843  TIM1_CCMR4_IC4F1 = (5)
                           000004   844  TIM1_CCMR4_IC4F0 = (4)
                           000003   845  TIM1_CCMR4_IC4PSC1 = (3)
                           000002   846  TIM1_CCMR4_IC4PSC0 = (2)
                                    847 ;  TIM1_CCMR4_CC4S1 = (1)
                           000000   848  TIM1_CCMR4_CC4S0 = (0)
                                    849 
                                    850 ; Timer 2 - 16-bit timer
                           005300   851  TIM2_CR1  = (0x5300)
                           005301   852  TIM2_IER  = (0x5301)
                           005302   853  TIM2_SR1  = (0x5302)
                           005303   854  TIM2_SR2  = (0x5303)
                           005304   855  TIM2_EGR  = (0x5304)
                           005305   856  TIM2_CCMR1  = (0x5305)
                           005306   857  TIM2_CCMR2  = (0x5306)
                           005307   858  TIM2_CCMR3  = (0x5307)
                           005308   859  TIM2_CCER1  = (0x5308)
                           005309   860  TIM2_CCER2  = (0x5309)
                           00530A   861  TIM2_CNTRH  = (0x530A)
                           00530B   862  TIM2_CNTRL  = (0x530B)
                           00530C   863  TIM2_PSCR  = (0x530C)
                           00530D   864  TIM2_ARRH  = (0x530D)
                           00530E   865  TIM2_ARRL  = (0x530E)
                           00530F   866  TIM2_CCR1H  = (0x530F)
                           005310   867  TIM2_CCR1L  = (0x5310)
                           005311   868  TIM2_CCR2H  = (0x5311)
                           005312   869  TIM2_CCR2L  = (0x5312)
                           005313   870  TIM2_CCR3H  = (0x5313)
                           005314   871  TIM2_CCR3L  = (0x5314)
                                    872 
                                    873 ; TIM2_CR1 bitfields
                           000000   874  TIM2_CR1_CEN=(0) ; Counter enable
                           000001   875  TIM2_CR1_UDIS=(1) ; Update disable
                           000002   876  TIM2_CR1_URS=(2) ; Update request source
                           000003   877  TIM2_CR1_OPM=(3) ; One-pulse mode
                           000007   878  TIM2_CR1_ARPE=(7) ; Auto-reload preload enable
                                    879 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                                    880 ; TIMER2_CCMR bitfields 
                           000000   881  TIM2_CCMR_CCS=(0) ; input/output select
                           000003   882  TIM2_CCMR_OCPE=(3) ; preload enable
                           000004   883  TIM2_CCMR_OCM=(4)  ; output compare mode 
                                    884 
                                    885 ; TIMER2_CCER1 bitfields
                           000000   886  TIM2_CCER1_CC1E=(0)
                           000001   887  TIM2_CCER1_CC1P=(1)
                           000004   888  TIM2_CCER1_CC2E=(4)
                           000005   889  TIM2_CCER1_CC2P=(5)
                                    890 
                                    891 ; TIMER2_EGR bitfields
                           000000   892  TIM2_EGR_UG=(0) ; update generation
                           000001   893  TIM2_EGR_CC1G=(1) ; Capture/compare 1 generation
                           000002   894  TIM2_EGR_CC2G=(2) ; Capture/compare 2 generation
                           000003   895  TIM2_EGR_CC3G=(3) ; Capture/compare 3 generation
                           000006   896  TIM2_EGR_TG=(6); Trigger generation
                                    897 
                                    898 ; Timer 3
                           005320   899  TIM3_CR1  = (0x5320)
                           005321   900  TIM3_IER  = (0x5321)
                           005322   901  TIM3_SR1  = (0x5322)
                           005323   902  TIM3_SR2  = (0x5323)
                           005324   903  TIM3_EGR  = (0x5324)
                           005325   904  TIM3_CCMR1  = (0x5325)
                           005326   905  TIM3_CCMR2  = (0x5326)
                           005327   906  TIM3_CCER1  = (0x5327)
                           005328   907  TIM3_CNTRH  = (0x5328)
                           005329   908  TIM3_CNTRL  = (0x5329)
                           00532A   909  TIM3_PSCR  = (0x532A)
                           00532B   910  TIM3_ARRH  = (0x532B)
                           00532C   911  TIM3_ARRL  = (0x532C)
                           00532D   912  TIM3_CCR1H  = (0x532D)
                           00532E   913  TIM3_CCR1L  = (0x532E)
                           00532F   914  TIM3_CCR2H  = (0x532F)
                           005330   915  TIM3_CCR2L  = (0x5330)
                                    916 
                                    917 ; TIM3_CR1  fields
                           000000   918  TIM3_CR1_CEN = (0)
                           000001   919  TIM3_CR1_UDIS = (1)
                           000002   920  TIM3_CR1_URS = (2)
                           000003   921  TIM3_CR1_OPM = (3)
                           000007   922  TIM3_CR1_ARPE = (7)
                                    923 ; TIM3_CCR2  fields
                           000000   924  TIM3_CCMR2_CC2S_POS = (0)
                           000003   925  TIM3_CCMR2_OC2PE_POS = (3)
                           000004   926  TIM3_CCMR2_OC2M_POS = (4)  
                                    927 ; TIM3_CCER1 fields
                           000000   928  TIM3_CCER1_CC1E = (0)
                           000001   929  TIM3_CCER1_CC1P = (1)
                           000004   930  TIM3_CCER1_CC2E = (4)
                           000005   931  TIM3_CCER1_CC2P = (5)
                                    932 ; TIM3_CCER2 fields
                           000000   933  TIM3_CCER2_CC3E = (0)
                           000001   934  TIM3_CCER2_CC3P = (1)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                                    935 
                                    936 ; Timer 4
                           005340   937  TIM4_CR1  = (0x5340)
                           005341   938  TIM4_IER  = (0x5341)
                           005342   939  TIM4_SR  = (0x5342)
                           005343   940  TIM4_EGR  = (0x5343)
                           005344   941  TIM4_CNTR  = (0x5344)
                           005345   942  TIM4_PSCR  = (0x5345)
                           005346   943  TIM4_ARR  = (0x5346)
                                    944 
                                    945 ; Timer 4 bitmasks
                                    946 
                           000007   947  TIM4_CR1_ARPE = (7)
                           000003   948  TIM4_CR1_OPM = (3)
                           000002   949  TIM4_CR1_URS = (2)
                           000001   950  TIM4_CR1_UDIS = (1)
                           000000   951  TIM4_CR1_CEN = (0)
                                    952 
                           000000   953  TIM4_IER_UIE = (0)
                                    954 
                           000000   955  TIM4_SR_UIF = (0)
                                    956 
                           000000   957  TIM4_EGR_UG = (0)
                                    958 
                           000002   959  TIM4_PSCR_PSC2 = (2)
                           000001   960  TIM4_PSCR_PSC1 = (1)
                           000000   961  TIM4_PSCR_PSC0 = (0)
                                    962 
                           000000   963  TIM4_PSCR_1 = 0
                           000001   964  TIM4_PSCR_2 = 1
                           000002   965  TIM4_PSCR_4 = 2
                           000003   966  TIM4_PSCR_8 = 3
                           000004   967  TIM4_PSCR_16 = 4
                           000005   968  TIM4_PSCR_32 = 5
                           000006   969  TIM4_PSCR_64 = 6
                           000007   970  TIM4_PSCR_128 = 7
                                    971 
                                    972 ; ADC2
                           005400   973  ADC_CSR  = (0x5400)
                           005401   974  ADC_CR1  = (0x5401)
                           005402   975  ADC_CR2  = (0x5402)
                           005403   976  ADC_CR3  = (0x5403)
                           005404   977  ADC_DRH  = (0x5404)
                           005405   978  ADC_DRL  = (0x5405)
                           005406   979  ADC_TDRH  = (0x5406)
                           005407   980  ADC_TDRL  = (0x5407)
                                    981  
                                    982 ; ADC bitmasks
                                    983 
                           000007   984  ADC_CSR_EOC = (7)
                           000006   985  ADC_CSR_AWD = (6)
                           000005   986  ADC_CSR_EOCIE = (5)
                           000004   987  ADC_CSR_AWDIE = (4)
                           000003   988  ADC_CSR_CH3 = (3)
                           000002   989  ADC_CSR_CH2 = (2)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                           000001   990  ADC_CSR_CH1 = (1)
                           000000   991  ADC_CSR_CH0 = (0)
                                    992 
                           000006   993  ADC_CR1_SPSEL2 = (6)
                           000005   994  ADC_CR1_SPSEL1 = (5)
                           000004   995  ADC_CR1_SPSEL0 = (4)
                           000001   996  ADC_CR1_CONT = (1)
                           000000   997  ADC_CR1_ADON = (0)
                                    998 
                           000006   999  ADC_CR2_EXTTRIG = (6)
                           000005  1000  ADC_CR2_EXTSEL1 = (5)
                           000004  1001  ADC_CR2_EXTSEL0 = (4)
                           000003  1002  ADC_CR2_ALIGN = (3)
                           000001  1003  ADC_CR2_SCAN = (1)
                                   1004 
                           000007  1005  ADC_CR3_DBUF = (7)
                           000006  1006  ADC_CR3_DRH = (6)
                                   1007 
                                   1008 ; beCAN
                           005420  1009  CAN_MCR = (0x5420)
                           005421  1010  CAN_MSR = (0x5421)
                           005422  1011  CAN_TSR = (0x5422)
                           005423  1012  CAN_TPR = (0x5423)
                           005424  1013  CAN_RFR = (0x5424)
                           005425  1014  CAN_IER = (0x5425)
                           005426  1015  CAN_DGR = (0x5426)
                           005427  1016  CAN_FPSR = (0x5427)
                           005428  1017  CAN_P0 = (0x5428)
                           005429  1018  CAN_P1 = (0x5429)
                           00542A  1019  CAN_P2 = (0x542A)
                           00542B  1020  CAN_P3 = (0x542B)
                           00542C  1021  CAN_P4 = (0x542C)
                           00542D  1022  CAN_P5 = (0x542D)
                           00542E  1023  CAN_P6 = (0x542E)
                           00542F  1024  CAN_P7 = (0x542F)
                           005430  1025  CAN_P8 = (0x5430)
                           005431  1026  CAN_P9 = (0x5431)
                           005432  1027  CAN_PA = (0x5432)
                           005433  1028  CAN_PB = (0x5433)
                           005434  1029  CAN_PC = (0x5434)
                           005435  1030  CAN_PD = (0x5435)
                           005436  1031  CAN_PE = (0x5436)
                           005437  1032  CAN_PF = (0x5437)
                                   1033 
                                   1034 
                                   1035 ; CPU
                           007F00  1036  CPU_A  = (0x7F00)
                           007F01  1037  CPU_PCE  = (0x7F01)
                           007F02  1038  CPU_PCH  = (0x7F02)
                           007F03  1039  CPU_PCL  = (0x7F03)
                           007F04  1040  CPU_XH  = (0x7F04)
                           007F05  1041  CPU_XL  = (0x7F05)
                           007F06  1042  CPU_YH  = (0x7F06)
                           007F07  1043  CPU_YL  = (0x7F07)
                           007F08  1044  CPU_SPH  = (0x7F08)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                           007F09  1045  CPU_SPL   = (0x7F09)
                           007F0A  1046  CPU_CCR   = (0x7F0A)
                                   1047 
                                   1048 ; global configuration register
                           007F60  1049  CFG_GCR   = (0x7F60)
                           000001  1050  CFG_GCR_AL = 1
                           000000  1051  CFG_GCR_SWIM = 0
                                   1052 
                                   1053 ; interrupt software priority 
                           007F70  1054  ITC_SPR1   = (0x7F70) ; (0..3) 0->resreved,AWU..EXT0 
                           007F71  1055  ITC_SPR2   = (0x7F71) ; (4..7) EXT1..EXT4 RX 
                           007F72  1056  ITC_SPR3   = (0x7F72) ; (8..11) beCAN RX..TIM1 UPDT/OVR  
                           007F73  1057  ITC_SPR4   = (0x7F73) ; (12..15) TIM1 CAP/CMP .. TIM3 UPDT/OVR 
                           007F74  1058  ITC_SPR5   = (0x7F74) ; (16..19) TIM3 CAP/CMP..I2C  
                           007F75  1059  ITC_SPR6   = (0x7F75) ; (20..23) UART3 TX..TIM4 CAP/OVR 
                           007F76  1060  ITC_SPR7   = (0x7F76) ; (24..29) FLASH WR..
                           007F77  1061  ITC_SPR8   = (0x7F77) ; (30..32) ..
                                   1062 
                           000001  1063 ITC_SPR_LEVEL1=1 
                           000000  1064 ITC_SPR_LEVEL2=0
                           000003  1065 ITC_SPR_LEVEL3=3 
                                   1066 
                                   1067 ; SWIM, control and status register
                           007F80  1068  SWIM_CSR   = (0x7F80)
                                   1069 ; debug registers
                           007F90  1070  DM_BK1RE   = (0x7F90)
                           007F91  1071  DM_BK1RH   = (0x7F91)
                           007F92  1072  DM_BK1RL   = (0x7F92)
                           007F93  1073  DM_BK2RE   = (0x7F93)
                           007F94  1074  DM_BK2RH   = (0x7F94)
                           007F95  1075  DM_BK2RL   = (0x7F95)
                           007F96  1076  DM_CR1   = (0x7F96)
                           007F97  1077  DM_CR2   = (0x7F97)
                           007F98  1078  DM_CSR1   = (0x7F98)
                           007F99  1079  DM_CSR2   = (0x7F99)
                           007F9A  1080  DM_ENFCTR   = (0x7F9A)
                                   1081 
                                   1082 ; Interrupt Numbers
                           000000  1083  INT_TLI = 0
                           000001  1084  INT_AWU = 1
                           000002  1085  INT_CLK = 2
                           000003  1086  INT_EXTI0 = 3
                           000004  1087  INT_EXTI1 = 4
                           000005  1088  INT_EXTI2 = 5
                           000006  1089  INT_EXTI3 = 6
                           000007  1090  INT_EXTI4 = 7
                           000008  1091  INT_CAN_RX = 8
                           000009  1092  INT_CAN_TX = 9
                           00000A  1093  INT_SPI = 10
                           00000B  1094  INT_TIM1_OVF = 11
                           00000C  1095  INT_TIM1_CCM = 12
                           00000D  1096  INT_TIM2_OVF = 13
                           00000E  1097  INT_TIM2_CCM = 14
                           00000F  1098  INT_TIM3_OVF = 15
                           000010  1099  INT_TIM3_CCM = 16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                           000011  1100  INT_UART1_TX_COMPLETED = 17
                           000012  1101  INT_AUART1_RX_FULL = 18
                           000013  1102  INT_I2C = 19
                           000014  1103  INT_UART3_TX_COMPLETED = 20
                           000015  1104  INT_UART3_RX_FULL = 21
                           000016  1105  INT_ADC2 = 22
                           000017  1106  INT_TIM4_OVF = 23
                           000018  1107  INT_FLASH = 24
                                   1108 
                                   1109 ; Interrupt Vectors
                           008000  1110  INT_VECTOR_RESET = 0x8000
                           008004  1111  INT_VECTOR_TRAP = 0x8004
                           008008  1112  INT_VECTOR_TLI = 0x8008
                           00800C  1113  INT_VECTOR_AWU = 0x800C
                           008010  1114  INT_VECTOR_CLK = 0x8010
                           008014  1115  INT_VECTOR_EXTI0 = 0x8014
                           008018  1116  INT_VECTOR_EXTI1 = 0x8018
                           00801C  1117  INT_VECTOR_EXTI2 = 0x801C
                           008020  1118  INT_VECTOR_EXTI3 = 0x8020
                           008024  1119  INT_VECTOR_EXTI4 = 0x8024
                           008028  1120  INT_VECTOR_CAN_RX = 0x8028
                           00802C  1121  INT_VECTOR_CAN_TX = 0x802c
                           008030  1122  INT_VECTOR_SPI = 0x8030
                           008034  1123  INT_VECTOR_TIM1_OVF = 0x8034
                           008038  1124  INT_VECTOR_TIM1_CCM = 0x8038
                           00803C  1125  INT_VECTOR_TIM2_OVF = 0x803C
                           008040  1126  INT_VECTOR_TIM2_CCM = 0x8040
                           008044  1127  INT_VECTOR_TIM3_OVF = 0x8044
                           008048  1128  INT_VECTOR_TIM3_CCM = 0x8048
                           00804C  1129  INT_VECTOR_UART1_TX_COMPLETED = 0x804c
                           008050  1130  INT_VECTOR_UART1_RX_FULL = 0x8050
                           008054  1131  INT_VECTOR_I2C = 0x8054
                           008058  1132  INT_VECTOR_UART3_TX_COMPLETED = 0x8058
                           00805C  1133  INT_VECTOR_UART3_RX_FULL = 0x805C
                           008060  1134  INT_VECTOR_ADC2 = 0x8060
                           008064  1135  INT_VECTOR_TIM4_OVF = 0x8064
                           008068  1136  INT_VECTOR_FLASH = 0x8068
                                   1137 
                                   1138 ; Condition code register bits
                           000007  1139 CC_V = 7  ; overflow flag 
                           000005  1140 CC_I1= 5  ; interrupt bit 1
                           000004  1141 CC_H = 4  ; half carry 
                           000003  1142 CC_I0 = 3 ; interrupt bit 0
                           000002  1143 CC_N = 2 ;  negative flag 
                           000001  1144 CC_Z = 1 ;  zero flag  
                           000000  1145 CC_C = 0 ; carry bit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                                     12     .include "inc/nucleo_8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; NUCLEO-8S208RB board specific definitions
                                     20 ; Date: 2019/10/29
                                     21 ; author: Jacques Deschênes, copyright 2018,2019
                                     22 ; licence: GPLv3
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 ; mcu on board is stm8s208rbt6
                                     26 
                                     27 ; crystal on board is 8Mhz
                           7A1200    28 FHSE = 8000000
                                     29 
                                     30 ; LED2 is user LED
                                     31 ; connected to PC5 via Q2 -> 2N7002 MOSFET
                           00500A    32 LED_PORT = PC_BASE ;port C  ODR
                           000005    33 LED_BIT = 5
                           000020    34 LED_MASK = (1<<LED_BIT) ;bit 5 mask
                                     35 
                                     36      
                                     37 ;  user interface UART via ST-LINK , (T-VCP)
                                     38 
                           000000    39 UART=UART1
                                     40 ; port used by  UART1  
                           005000    41 UART_PORT_ODR=PA_ODR 
                           005002    42 UART_PORT_DDR=PA_DDR 
                           005001    43 UART_PORT_IDR=PA_IDR 
                           005003    44 UART_PORT_CR1=PA_CR1 
                           005004    45 UART_PORT_CR2=PA_CR2 
                                     46 
                                     47 ; clock enable bit 
                           000002    48 UART_PCKEN=CLK_PCKENR1_UART1
                                     49 
                                     50 ; UART1 registers 
                           005230    51 UART_SR=UART1_SR
                           005231    52 UART_DR=UART1_DR
                           005232    53 UART_BRR1=UART1_BRR1
                           005233    54 UART_BRR2=UART1_BRR2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



                           005234    55 UART_CR1=UART1_CR1
                           005235    56 UART_CR2=UART1_CR2
                                     57 
                                     58 ; TX, RX pin
                           000005    59 UART_TX_PIN=UART1_TX_PIN
                           000004    60 UART_RX_PIN=UART1_RX_PIN 
                                     61 
                                     62 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                                     13     .include "inc/ascii.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;-------------------------------------------------------
                                     20 ;     ASCII control  values
                                     21 ;     CTRL_x   are VT100 keyboard values  
                                     22 ; REF: https://en.wikipedia.org/wiki/ASCII    
                                     23 ;-------------------------------------------------------
                           000001    24 		CTRL_A = 1
                           000001    25 		SOH=CTRL_A  ; start of heading 
                           000002    26 		CTRL_B = 2
                           000002    27 		STX=CTRL_B  ; start of text 
                           000003    28 		CTRL_C = 3
                           000003    29 		ETX=CTRL_C  ; end of text 
                           000004    30 		CTRL_D = 4
                           000004    31 		EOT=CTRL_D  ; end of transmission 
                           000005    32 		CTRL_E = 5
                           000005    33 		ENQ=CTRL_E  ; enquery 
                           000006    34 		CTRL_F = 6
                           000006    35 		ACK=CTRL_F  ; acknowledge
                           000007    36 		CTRL_G = 7
                           000007    37         BELL = 7    ; vt100 terminal generate a sound.
                           000008    38 		CTRL_H = 8  
                           000008    39 		BS = 8     ; back space 
                           000009    40         CTRL_I = 9
                           000009    41     	TAB = 9     ; horizontal tabulation
                           00000A    42         CTRL_J = 10 
                           00000A    43 		LF = 10     ; line feed
                           00000B    44 		CTRL_K = 11
                           00000B    45         VT = 11     ; vertical tabulation 
                           00000C    46 		CTRL_L = 12
                           00000C    47         FF = 12      ; new page
                           00000D    48 		CTRL_M = 13
                           00000D    49 		CR = 13      ; carriage return 
                           00000E    50 		CTRL_N = 14
                           00000E    51 		SO=CTRL_N    ; shift out 
                           00000F    52 		CTRL_O = 15
                           00000F    53 		SI=CTRL_O    ; shift in 
                           000010    54 		CTRL_P = 16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                           000010    55 		DLE=CTRL_P   ; data link escape 
                           000011    56 		CTRL_Q = 17
                           000011    57 		DC1=CTRL_Q   ; device control 1 
                           000011    58 		XON=DC1 
                           000012    59 		CTRL_R = 18
                           000012    60 		DC2=CTRL_R   ; device control 2 
                           000013    61 		CTRL_S = 19
                           000013    62 		DC3=CTRL_S   ; device control 3
                           000013    63 		XOFF=DC3 
                           000014    64 		CTRL_T = 20
                           000014    65 		DC4=CTRL_T   ; device control 4 
                           000015    66 		CTRL_U = 21
                           000015    67 		NAK=CTRL_U   ; negative acknowledge
                           000016    68 		CTRL_V = 22
                           000016    69 		SYN=CTRL_V   ; synchronous idle 
                           000017    70 		CTRL_W = 23
                           000017    71 		ETB=CTRL_W   ; end of transmission block
                           000018    72 		CTRL_X = 24
                           000018    73 		CAN=CTRL_X   ; cancel 
                           000019    74 		CTRL_Y = 25
                           000019    75 		EM=CTRL_Y    ; end of medium
                           00001A    76 		CTRL_Z = 26
                           00001A    77 		SUB=CTRL_Z   ; substitute 
                           00001A    78 		EOF=SUB      ; end of text file in MSDOS 
                           00001B    79 		ESC = 27     ; escape 
                           00001C    80 		FS=28        ; file separator 
                           00001D    81 		GS=29        ; group separator 
                           00001E    82 		RS=30		 ; record separator 
                           00001F    83 		US=31 		 ; unit separator 
                           000020    84 		SPACE = 32
                           00002C    85 		COMMA = 44
                           00003A    86 		COLON = 58 
                           00003B    87 		SEMIC = 59  
                           000023    88 		SHARP = 35
                           000027    89 		TICK = 39
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



                                     14 	.include "inc/gen_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of STM8_NUCLEO 
                                      4 ;
                                      5 ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;   console Input/Output module
                                     20 ;   DATE: 2019-12-11
                                     21 ;    
                                     22 ;   General usage macros.   
                                     23 ;
                                     24 ;--------------------------------------
                                     25 
                                     26     ; reserve space on stack
                                     27     ; for local variables
                                     28     .macro _vars n 
                                     29     sub sp,#n 
                                     30     .endm 
                                     31     
                                     32     ; free space on stack
                                     33     .macro _drop n 
                                     34     addw sp,#n 
                                     35     .endm
                                     36 
                                     37     ; declare ARG_OFS for arguments 
                                     38     ; displacement on stack. This 
                                     39     ; value depend on local variables 
                                     40     ; size.
                                     41     .macro _argofs n 
                                     42     ARG_OFS=2+n 
                                     43     .endm 
                                     44 
                                     45     ; declare a function argument 
                                     46     ; position relative to stack pointer 
                                     47     ; _argofs must be called before it.
                                     48     .macro _arg name ofs 
                                     49     name=ARG_OFS+ofs 
                                     50     .endm 
                                     51 
                                     52     ; software reset 
                                     53     .macro _swreset
                                     54     mov WWDG_CR,#0X80
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                     55     .endm 
                                     56 
                                     57     ; increment zero page variable 
                                     58     .macro _incz v 
                                     59     .byte 0x3c, v 
                                     60     .endm 
                                     61 
                                     62     ; decrement zero page variable 
                                     63     .macro _decz v 
                                     64     .byte 0x3a,v 
                                     65     .endm 
                                     66 
                                     67     ; clear zero page variable 
                                     68     .macro _clrz v 
                                     69     .byte 0x3f, v 
                                     70     .endm 
                                     71 
                                     72     ; load A zero page variable 
                                     73     .macro _ldaz v 
                                     74     .byte 0xb6,v 
                                     75     .endm 
                                     76 
                                     77     ; store A zero page variable 
                                     78     .macro _straz v 
                                     79     .byte 0xb7,v 
                                     80     .endm 
                                     81 
                                     82     ; load x from variable in zero page 
                                     83     .macro _ldxz v 
                                     84     .byte 0xbe,v 
                                     85     .endm 
                                     86 
                                     87     ; load y from variable in zero page 
                                     88     .macro _ldyz v 
                                     89     .byte 0x90,0xbe,v 
                                     90     .endm 
                                     91 
                                     92     ; store x in zero page variable 
                                     93     .macro _strxz v 
                                     94     .byte 0xbf,v 
                                     95     .endm 
                                     96 
                                     97     ; store y in zero page variable 
                                     98     .macro _stryz v 
                                     99     .byte 0x90,0xbf,v 
                                    100     .endm 
                                    101 
                                    102     ;  increment 16 bits variable
                                    103     ;  use 10 bytes  
                                    104     .macro _incwz  v 
                                    105         _incz v+1   ; 1 cy, 2 bytes 
                                    106         jrne .+4  ; 1|2 cy, 2 bytes 
                                    107         _incz v     ; 1 cy, 2 bytes  
                                    108     .endm ; 3 cy 
                                    109 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



                                    110     ; xor op with zero page variable 
                                    111     .macro _xorz v 
                                    112     .byte 0xb8,v 
                                    113     .endm 
                                    114     
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                                     15     .include "inc/app_macros.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2025
                                      3 ; This file is part of eeProg 
                                      4 ;
                                      5 ;     eeProg is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     eeProg is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with eeProg.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                           0017FF    19 	STACK_EMPTY=RAM_SIZE-1  
                           000080    20     STACK_SIZE=128 
                           000040    21     PAD_SIZE=64
                           000080    22     TIB_SIZE=128 ; input buffer size 
                           000020    23     RX_QUEUE_SIZE==32 ; UART receive queue size 
                                     24 
                           00F424    25     TIM2_CLK_FREQ=62500
                                     26 
                                     27 ;--------------------------------------
                                     28 ;   flags 
                                     29 ;-------------------------------------
                                     30 
                           000000    31     FUPPER=0 
                           000001    32     FTIMER=1
                                     33     
                                     34 ;------------------------------------
                                     35 ;  board user LED control macros 
                                     36 ;------------------------------------
                                     37 
                                     38     .macro _led_on 
                                     39         bset LED_PORT,#LED_BIT 
                                     40     .endm 
                                     41 
                                     42     .macro _led_off 
                                     43         bres LED_PORT,#LED_BIT 
                                     44     .endm 
                                     45 
                                     46     .macro _led_toggle 
                                     47         bcpl LED_PORT,#LED_BIT 
                                     48     .endm 
                                     49 
                                     50 
                                     51    
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                                     16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                                     31 
                                     32   
                                     33 ;;-----------------------------------
                                     34     .area SSEG (ABS)
                                     35 ;; working buffers and stack at end of RAM. 	
                                     36 ;;-----------------------------------
      0016C0                         37     .org RAM_SIZE-STACK_SIZE-TIB_SIZE-PAD_SIZE 
      0016C0                         38 tib: .ds TIB_SIZE ; input buffer 
      001740                         39 write_buffer::                 ; use to write FLASH block (alias for pad )
      001740                         40 pad:: .ds PAD_SIZE             ; working buffer
      001780                         41 stack_full:: .ds STACK_SIZE   ; control stack 
      001800                         42 stack_unf: ; stack underflow ; control_stack bottom 
                                     43 
                                     44 ;;--------------------------------------
                                     45     .area HOME 
                                     46 ;; interrupt vector table at 0x8000
                                     47 ;;--------------------------------------
                                     48 
      000000 82 00 00 5D             49     int cold_start			; RESET vector 
      000004 82 00 00 00             50 	int NonHandledInterrupt ; trap instruction 
      000008 82 00 00 00             51 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 00             52 	int NonHandledInterrupt ;int1 AWU   auto wake up from halt
      000010 82 00 00 00             53 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 00             54 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 00             55 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 00             56 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 00             57 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 00             58 	int NonHandledInterrupt
      000028 82 00 00 00             59 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 00             60 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 00             61 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 00             62 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 00             63 	int NonHandledInterrupt ; int12 TIM1 capture/compare
      00003C 82 00 00 00             64 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 00             65 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 00             66 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 00             67 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 00             68 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 00 9F             69 	int UartRxHandler		;int18 UART1 RX full 
      000054 82 00 00 00             70 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 00             71 	int NonHandledInterrupt ;int20 UART3 TX completed
      00005C 82 00 00 00             72 	int NonHandledInterrupt ;int21 UART3 RX full
      000060 82 00 00 00             73 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 04             74 	int Timer4UpdateHandler	;int23 TIM4 update/overflow ; used as msec ticks counter
      000068 82 00 00 00             75 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 00             76 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 00             77 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 00             78 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 00             79 	int NonHandledInterrupt ;int28  not used
      00007C 82 00 00 00             80 	int NonHandledInterrupt ;int29  not used
                                     81 
                                     82 
                                     83 ;--------------------------------------
                                     84     .area DATA (ABS)
      000000                         85 	.org 0 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                                     86 ;--------------------------------------	
                                     87 
                                     88 ; keep the following 3 variables in this order 
      000000                         89 base::  .blkb 1 ; nemeric base used to print integer 
      000001                         90 fmstr:: .blkb 1 ; frequency in Mhz of Fmaster
      000002                         91 ticks: .blkb 3 ; milliseconds ticks counter (see Timer4UpdateHandler)
      000005                         92 timer:: .blkw 1 ;  milliseconds count down timer 
      000007                         93 farptr: .blkb 1 ; 24 bits pointer used by file system, upper-byte
      000008                         94 ptr16::  .blkb 1 ; 16 bits pointer , farptr high-byte 
      000009                         95 ptr8:   .blkb 1 ; 8 bits pointer, farptr low-byte  
      00000A                         96 flags:: .blkb 1 ; various boolean flags
      00000B                         97 rx1_head::  .blkb 1 ; rx1_queue head pointer
      00000C                         98 rx1_tail::   .blkb 1 ; rx1_queue tail pointer  
      00000D                         99 rx1_queue:: .ds RX_QUEUE_SIZE ; UART receive circular queue 
      00002D                        100 mode: .blkb 1 ; command mode 
      00002E                        101 xamadr: .blkw 1 ; examine address 
      000030                        102 storadr: .blkw 1 ; store address 
      000032                        103 last: .blkw 1   ; last address parsed from input 
                                    104 
                                    105 	.area CODE 
                                    106 
                                    107 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    108 ; non handled interrupt 
                                    109 ; reset MCU
                                    110 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000000                        111 NonHandledInterrupt:
      000000                        112 	_swreset ; see "inc/gen_macros.inc"
      000000 35 80 50 D1      [ 1]    1     mov WWDG_CR,#0X80
                                    113 
                                    114 
                                    115 ;------------------------------
                                    116 ; TIMER 4 is used to maintain 
                                    117 ; a milliseconds 'ticks' counter
                                    118 ; and decrement 'timer' varaiable
                                    119 ; ticks range {0..2^23-1}
                                    120 ; timer range {0..65535}
                                    121 ;--------------------------------
      000004                        122 Timer4UpdateHandler:
      000004 72 5F 53 42      [ 1]  123 	clr TIM4_SR 
      000008                        124 	_ldaz ticks 
      000008 B6 02                    1     .byte 0xb6,ticks 
      00000A                        125 	_ldxz ticks+1
      00000A BE 03                    1     .byte 0xbe,ticks+1 
      00000C 1C 00 01         [ 2]  126 	addw x,#1 
      00000F A9 00            [ 1]  127 	adc a,#0 
      000011 2A 02            [ 1]  128 	jrpl 0$
                                    129 ; reset to 0 when negative
      000013 4F               [ 1]  130 	clr a 
      000014 5F               [ 1]  131 	clrw x 
      000015                        132 0$:	_straz ticks 
      000015 B7 02                    1     .byte 0xb7,ticks 
      000017 CF 00 03         [ 2]  133 	ldw ticks+1,x 
      00001A                        134 	_ldxz timer
      00001A BE 05                    1     .byte 0xbe,timer 
      00001C 27 0A            [ 1]  135 	jreq 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      00001E 5A               [ 2]  136 	decw x 
      00001F CF 00 05         [ 2]  137 	ldw timer,x
      000022 26 04            [ 1]  138 	jrne 1$ 
      000024 72 12 00 0A      [ 1]  139 	bset flags,#FTIMER  
      000028                        140 1$:	
      000028 80               [11]  141 	iret 
                                    142 
                                    143 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    144 ;    peripherals initialization
                                    145 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    146 
                                    147 
                                    148 ;---------------------------------
                                    149 ; TIM4 is configured to generate an 
                                    150 ; interrupt every millisecond 
                                    151 ;----------------------------------
      000029                        152 timer4_init:
      000029 72 18 50 C7      [ 1]  153 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM4
      00002D 72 11 53 40      [ 1]  154 	bres TIM4_CR1,#TIM4_CR1_CEN 
      000031 C6 00 01         [ 1]  155 	ld a,fmstr 
      000034 AE 00 E8         [ 2]  156 	ldw x,#0xe8 
      000037 42               [ 4]  157 	mul x,a
      000038 89               [ 2]  158 	pushw x 
      000039 AE 00 03         [ 2]  159 	ldw x,#3 
      00003C 42               [ 4]  160 	mul x,a 
      00003D 5E               [ 1]  161 	swapw x 
      00003E 72 FB 01         [ 2]  162 	addw x,(1,sp) 
      000041                        163 	_drop 2  
      000041 5B 02            [ 2]    1     addw sp,#2 
      000043 4F               [ 1]  164 	clr a 
      000044                        165 0$:	 
      000044 A3 01 00         [ 2]  166 	cpw x,#256 
      000047 2B 04            [ 1]  167 	jrmi 1$ 
      000049 4C               [ 1]  168 	inc a 
      00004A 54               [ 2]  169 	srlw x 
      00004B 20 F7            [ 2]  170 	jra 0$ 
      00004D                        171 1$:
      00004D C7 53 45         [ 1]  172 	ld TIM4_PSCR,a 
      000050 9F               [ 1]  173 	ld a,xl 
      000051 C7 53 46         [ 1]  174 	ld TIM4_ARR,a
      000054 35 05 53 40      [ 1]  175 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      000058 72 10 53 41      [ 1]  176 	bset TIM4_IER,#TIM4_IER_UIE
      00005C 81               [ 4]  177 	ret
                                    178 
                                    179 ;-------------------------------------
                                    180 ;  initialization entry point 
                                    181 ;-------------------------------------
      00005D                        182 cold_start:
                                    183 ;set stack 
      00005D AE 17 FF         [ 2]  184 	ldw x,#STACK_EMPTY
      000060 94               [ 1]  185 	ldw sp,x
                                    186 ; clear all ram 
      000061 7F               [ 1]  187 0$: clr (x)
      000062 5A               [ 2]  188 	decw x 
      000063 26 FC            [ 1]  189 	jrne 0$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



                                    190 ; activate pull up on all inputs 
      000065 A6 FF            [ 1]  191 	ld a,#255 
      000067 C7 50 03         [ 1]  192 	ld PA_CR1,a 
      00006A C7 50 08         [ 1]  193 	ld PB_CR1,a 
      00006D C7 50 0D         [ 1]  194 	ld PC_CR1,a 
      000070 C7 50 12         [ 1]  195 	ld PD_CR1,a 
      000073 C7 50 17         [ 1]  196 	ld PE_CR1,a 
      000076 C7 50 1C         [ 1]  197 	ld PF_CR1,a 
      000079 C7 50 21         [ 1]  198 	ld PG_CR1,a 
      00007C C7 50 2B         [ 1]  199 	ld PI_CR1,a
                                    200 ; set user LED pin as output 
      00007F 72 1A 50 0D      [ 1]  201     bset LED_PORT+GPIO_CR1,#LED_BIT
      000083 72 1A 50 0E      [ 1]  202     bset LED_PORT+GPIO_CR2,#LED_BIT
      000087 72 1A 50 0C      [ 1]  203     bset LED_PORT+ GPIO_DDR,#LED_BIT
                                    204 ; select internal clock no divisor: 16 Mhz 	
      00008B 72 5F 50 C6      [ 1]  205 	clr CLK_CKDIVR ; 16Mhz HSI 
      00008F 35 10 00 01      [ 1]  206 	mov fmstr,#16
      000093 CD 00 29         [ 4]  207 	call timer4_init ; msec ticks timer 
                                    208 ; UART at 115200 BAUD
                                    209 ; used for user interface 
      000096 CD 00 BB         [ 4]  210 	call uart_init
      000099 9A               [ 1]  211 	rim ; enable interrupts 
      00009A CC 02 D6         [ 2]  212 	jp eeProg 
      00009D 20 FE            [ 2]  213 	jra . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2022,2025 
                                      3 ; This file is part of eBasic 
                                      4 ;
                                      5 ;     eBasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     eBasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with eBasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;------------------------------
                                     19 ; This file is for functions 
                                     20 ; interfacing with VT100 terminal
                                     21 ; emulator.
                                     22 ;------------------------------
                                     23 
                                     24     .module TERMINAL  
                                     25 
                                     26     .area CODE 
                                     27 
                                     28 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     29 ;;   UART subroutines
                                     30 ;;   used for user interface 
                                     31 ;;   communication channel.
                                     32 ;;   settings: 
                                     33 ;;		115200 8N1 no flow control
                                     34 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     35 
                                     36 
                                     37 
                                     38 	.area CODE
                                     39 
                                     40 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     41 ;;; Uart1 intterrupt handler 
                                     42 ;;; on receive character 
                                     43 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     44 ;--------------------------
                                     45 ; UART receive character
                                     46 ; in a FIFO buffer 
                                     47 ; CTRL+C (ASCII 3)
                                     48 ; cancel program execution
                                     49 ; and fall back to command line
                                     50 ; CTRL+X reboot system 
                                     51 ; CTLR+Z erase EEPROM autorun 
                                     52 ;        information and reboot
                                     53 ;--------------------------
      00009F                         54 UartRxHandler: ; console receive char 
      00009F 72 0B 52 30 16   [ 2]   55 	btjf UART_SR,#UART_SR_RXNE,5$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      0000A4 C6 52 31         [ 1]   56 	ld a,UART_DR 
      0000A7 88               [ 1]   57 	push a 
      0000A8 A6 0D            [ 1]   58 	ld a,#rx1_queue 
      0000AA CB 00 0C         [ 1]   59 	add a,rx1_tail 
      0000AD 5F               [ 1]   60 	clrw x 
      0000AE 97               [ 1]   61 	ld xl,a 
      0000AF 84               [ 1]   62 	pop a 
      0000B0 F7               [ 1]   63 	ld (x),a 
      0000B1 C6 00 0C         [ 1]   64 	ld a,rx1_tail 
      0000B4 4C               [ 1]   65 	inc a 
      0000B5 A4 1F            [ 1]   66 	and a,#RX_QUEUE_SIZE-1
      0000B7 C7 00 0C         [ 1]   67 	ld rx1_tail,a 
      0000BA                         68 5$:	
      0000BA 80               [11]   69 	iret 
                                     70 
                                     71 
                                     72 ;---------------------------------------------
                                     73 ; initialize UART, 115200 8N1
                                     74 ; called from cold_start in hardware_init.asm 
                                     75 ; input:
                                     76 ;	none
                                     77 ; output:
                                     78 ;   none
                                     79 ;---------------------------------------------
                           01C200    80 BAUD_RATE=115200
                                     81 ; BRR value = 16Mhz/115200 = 0x8B  
                           000008    82 BRR1_VAL=8 
                           00000B    83 BRR2_VAL=0xB
      0000BB                         84 uart_init:
      0000BB A6 0B            [ 1]   85 	ld a,#BRR2_VAL
      0000BD C7 52 33         [ 1]   86 	ld UART_BRR2,a 
      0000C0 A6 08            [ 1]   87 	ld a,#BRR1_VAL  
      0000C2 C7 52 32         [ 1]   88 	ld UART_BRR1,a
      0000C5 72 5F 52 31      [ 1]   89     clr UART_DR
      0000C9 35 2C 52 35      [ 1]   90 	mov UART_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN));
      0000CD 72 10 52 35      [ 1]   91 	bset UART_CR2,#UART_CR2_SBK
      0000D1 72 0D 52 30 FB   [ 2]   92     btjf UART_SR,#UART_SR_TC,.
      0000D6 CD 00 DA         [ 4]   93 	call clear_queue
      0000D9 81               [ 4]   94 	ret
                                     95 
                                     96 ;---------------------------
                                     97 ;  clear rx1_queue 
                                     98 ;---------------------------
      0000DA                         99 clear_queue:
      0000DA                        100     _clrz rx1_head 
      0000DA 3F 0B                    1     .byte 0x3f, rx1_head 
      0000DC                        101 	_clrz rx1_tail 
      0000DC 3F 0C                    1     .byte 0x3f, rx1_tail 
      0000DE 81               [ 4]  102 	ret 
                                    103 
                                    104 
                                    105 ;---------------------------------
                                    106 ; uart_putc
                                    107 ; send a character via UART
                                    108 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



                                    109 ;    A  	character to send
                                    110 ;---------------------------------
      0000DF                        111 putc::
      0000DF                        112 uart_putc:: 
      0000DF 72 0F 52 30 FB   [ 2]  113 	btjf UART_SR,#UART_SR_TXE,.
      0000E4 C7 52 31         [ 1]  114 	ld UART_DR,a 
      0000E7 81               [ 4]  115 	ret 
                                    116 
                                    117 
                                    118 ;---------------------------------
                                    119 ; Query for character in rx1_queue
                                    120 ; input:
                                    121 ;   none 
                                    122 ; output:
                                    123 ;   A     0 no charcter available
                                    124 ;   Z     1 no character available
                                    125 ;---------------------------------
      0000E8                        126 qgetc::
      0000E8                        127 uart_qgetc::
      0000E8                        128 	_ldaz rx1_head 
      0000E8 B6 0B                    1     .byte 0xb6,rx1_head 
      0000EA C0 00 0C         [ 1]  129 	sub a,rx1_tail 
      0000ED 81               [ 4]  130 	ret 
                                    131 
                                    132 ;---------------------------------
                                    133 ; wait character from UART 
                                    134 ; input:
                                    135 ;   none
                                    136 ; output:
                                    137 ;   A 			char  
                                    138 ;--------------------------------	
      0000EE                        139 getc:: ;console input
      0000EE                        140 uart_getc::
      0000EE CD 00 E8         [ 4]  141 	call uart_qgetc
      0000F1 27 FB            [ 1]  142 	jreq uart_getc 
      0000F3 89               [ 2]  143 	pushw x 
                                    144 ;; rx1_queue must be in page 0 	
      0000F4 A6 0D            [ 1]  145 	ld a,#rx1_queue
      0000F6 CB 00 0B         [ 1]  146 	add a,rx1_head 
      0000F9 5F               [ 1]  147 	clrw x  
      0000FA 97               [ 1]  148 	ld xl,a 
      0000FB F6               [ 1]  149 	ld a,(x)
      0000FC 88               [ 1]  150 	push a
      0000FD                        151 	_ldaz rx1_head 
      0000FD B6 0B                    1     .byte 0xb6,rx1_head 
      0000FF 4C               [ 1]  152 	inc a 
      000100 A4 1F            [ 1]  153 	and a,#RX_QUEUE_SIZE-1
      000102                        154 	_straz rx1_head 
      000102 B7 0B                    1     .byte 0xb7,rx1_head 
      000104 84               [ 1]  155 	pop a 
      000105 72 01 00 0A 0A   [ 2]  156 	btjf flags,#FUPPER,1$
      00010A A1 61            [ 1]  157 	cp a,#'a 
      00010C 2B 06            [ 1]  158 	jrmi 1$
      00010E A1 7B            [ 1]  159 	cp a,#'z+1 
      000110 2B 02            [ 1]  160 	jrmi 1$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      000112 A4 DF            [ 1]  161 	and a,#0xDF  
      000114                        162 1$: 
      000114 85               [ 2]  163 	popw x
      000115 81               [ 4]  164 	ret 
                                    165 
                                    166 ;-----------------------------
                                    167 ; send an ASCIZ string to UART 
                                    168 ; input: 
                                    169 ;   x 		char * 
                                    170 ; output:
                                    171 ;   none 
                                    172 ;-------------------------------
      000116                        173 puts::
      000116 F6               [ 1]  174     ld a,(x)
      000117 27 06            [ 1]  175 	jreq 1$
      000119 CD 00 DF         [ 4]  176 	call putc 
      00011C 5C               [ 1]  177 	incw x 
      00011D 20 F7            [ 2]  178 	jra puts 
      00011F 5C               [ 1]  179 1$:	incw x 
      000120 81               [ 4]  180 	ret 
                                    181 
                                    182 ;---------------------------
                                    183 ; delete character at left 
                                    184 ; of cursor on terminal 
                                    185 ; input:
                                    186 ;   none 
                                    187 ; output:
                                    188 ;	none 
                                    189 ;---------------------------
      000121                        190 uart_bksp::
      000121                        191 bksp::
      000121 88               [ 1]  192 	push a 
      000122 A6 08            [ 1]  193 	ld a,#BS 
      000124 CD 00 DF         [ 4]  194 	call putc  
      000127 A6 20            [ 1]  195 	ld a,#SPACE 
      000129 CD 00 DF         [ 4]  196 	call putc 
      00012C A6 08            [ 1]  197 	ld a,#BS 
      00012E CD 00 DF         [ 4]  198 	call putc 
      000131 84               [ 1]  199 	pop a 
      000132 81               [ 4]  200 	ret 
                                    201  
                                    202 
                                    203 ;---------------------------
                                    204 ; send LF character 
                                    205 ; terminal interpret it 
                                    206 ; as CRLF 
                                    207 ;---------------------------
      000133                        208 new_line:: 
      000133 A6 0D            [ 1]  209 	ld a,#CR  
      000135 CD 00 DF         [ 4]  210 	call putc 
      000138 81               [ 4]  211 	ret 
                                    212 
                                    213 ;--------------------------
                                    214 ; erase terminal screen 
                                    215 ;--------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      000139                        216 clr_screen::
      000139 A6 1B            [ 1]  217 	ld a,#ESC 
      00013B CD 00 DF         [ 4]  218 	call putc 
      00013E A6 63            [ 1]  219 	ld a,#'c 
      000140 CD 00 DF         [ 4]  220 	call putc 
      000143 81               [ 4]  221 	ret 
                                    222 
                                    223 ;--------------------------
                                    224 ; output a single space
                                    225 ;--------------------------
      000144                        226 space::
      000144 A6 20            [ 1]  227 	ld a,#SPACE 
      000146 CD 00 DF         [ 4]  228 	call putc 
      000149 81               [ 4]  229 	ret 
                                    230 
                                    231 ;--------------------------
                                    232 ; print n spaces on terminal
                                    233 ; input:
                                    234 ;  X 		number of spaces 
                                    235 ; output:
                                    236 ;	none 
                                    237 ;---------------------------
      00014A                        238 spaces::
      00014A A6 20            [ 1]  239 	ld a,#SPACE 
      00014C 5D               [ 2]  240 1$:	tnzw x
      00014D 27 06            [ 1]  241 	jreq 9$
      00014F CD 00 DF         [ 4]  242 	call putc 
      000152 5A               [ 2]  243 	decw x
      000153 20 F7            [ 2]  244 	jra 1$
      000155                        245 9$: 
      000155 81               [ 4]  246 	ret 
                                    247 
                                    248 ;--------------------------
                                    249 ; this version of readln 
                                    250 ; if to be used with 
                                    251 ; non ANSI terminal 
                                    252 ; like STM8_terminal 
                                    253 ; 
                                    254 ; BS      delete last character 
                                    255 ; input:
                                    256 ;   A     initial line length
                                    257 ; output:
                                    258 ;   A     line length 
                                    259 ;   X     tib address 
                                    260 ;--------------------------
                           00004F   261 MAX_LEN=79
                           000001   262 	HI_LL=1
                           000002   263 	LN_LEN=2
                           000003   264 	CHAR=3 
                           000003   265 	VSIZE=CHAR  
      000156                        266 readln::
      000156                        267 	_vars VSIZE
      000156 52 03            [ 2]    1     sub sp,#VSIZE 
      000158 0F 03            [ 1]  268 	clr (CHAR,sp) 
      00015A 0F 01            [ 1]  269 	clr (HI_LL,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      00015C 6B 02            [ 1]  270 	ld (LN_LEN,sp),a
      00015E AE 16 C0         [ 2]  271 	ldw x,#tib 
      000161 4D               [ 1]  272 	tnz a 
      000162 27 09            [ 1]  273 	jreq 1$
      000164 CD 01 16         [ 4]  274 	call puts 
      000167 AE 16 C0         [ 2]  275 	ldw x,#tib
      00016A 72 FB 01         [ 2]  276 	addw x,(HI_LL,sp)
      00016D                        277 1$:
      00016D CD 00 EE         [ 4]  278 	call uart_getc
      000170 CD 02 59         [ 4]  279 	call to_upper
      000173 6B 03            [ 1]  280 	ld (CHAR,sp),a 
      000175 A1 20            [ 1]  281 	cp a,#SPACE 
      000177 24 17            [ 1]  282 	jruge 4$
      000179 A1 0D            [ 1]  283 	cp a,#CR 
      00017B 26 02            [ 1]  284 	jrne 2$
      00017D 20 25            [ 2]  285 	jra 9$ 
      00017F                        286 2$:
      00017F A1 08            [ 1]  287 	cp a,#BS 
      000181 26 EA            [ 1]  288 	jrne 1$ 
      000183 0D 02            [ 1]  289 	tnz (LN_LEN,sp)
      000185 27 E6            [ 1]  290 	jreq 1$ 
      000187 CD 01 21         [ 4]  291 	call bksp 
      00018A 5A               [ 2]  292 	decw x 
      00018B 7F               [ 1]  293 	clr (x)
      00018C 0A 02            [ 1]  294 	dec (LN_LEN,sp)
      00018E 20 DD            [ 2]  295 	jra 1$ 
      000190                        296 4$:	
                                    297 ; append character to end of line 
      000190 7B 02            [ 1]  298 	ld a,(LN_LEN,sp)
      000192 A1 4F            [ 1]  299 	cp a,#MAX_LEN 
      000194 2B 02            [ 1]  300 	jrmi 5$
      000196 20 D5            [ 2]  301     jra 1$ 
      000198                        302 5$:
      000198 7B 03            [ 1]  303 	ld a,(CHAR,sp)
      00019A CD 00 DF         [ 4]  304 	call uart_putc 
      00019D F7               [ 1]  305 	ld (x),a 
      00019E 5C               [ 1]  306 	incw x 
      00019F 7F               [ 1]  307 	clr (x)
      0001A0 0C 02            [ 1]  308 	inc (LN_LEN,sp)
      0001A2 20 C9            [ 2]  309 	jra 1$ 
      0001A4 CD 00 DF         [ 4]  310 9$:	call uart_putc  
      0001A7                        311 10$: 
      0001A7 AE 16 C0         [ 2]  312 	ldw x,#tib 
      0001AA 7B 02            [ 1]  313 	ld a,(LN_LEN,sp)
      0001AC                        314 	_drop VSIZE 
      0001AC 5B 03            [ 2]    1     addw sp,#VSIZE 
      0001AE 81               [ 4]  315 	ret 
                                    316 
                                    317 ;----------------------------------
                                    318 ; convert to hexadecimal digit 
                                    319 ; input:
                                    320 ;   A       digit to convert 
                                    321 ; output:
                                    322 ;   A       hexdecimal character 
                                    323 ;----------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      0001AF                        324 to_hex_char::
      0001AF A4 0F            [ 1]  325 	and a,#15 
      0001B1 A1 0A            [ 1]  326 	cp a,#10 
      0001B3 2B 02            [ 1]  327 	jrmi 1$ 
      0001B5 AB 07            [ 1]  328 	add a,#7
      0001B7 AB 30            [ 1]  329 1$: add a,#'0 
      0001B9 81               [ 4]  330 	ret 
                                    331 
                                    332 ;------------------------------
                                    333 ; print byte  in hexadecimal 
                                    334 ; on console
                                    335 ; no space separator 
                                    336 ; input:
                                    337 ;    A		byte to print
                                    338 ;------------------------------
      0001BA                        339 print_hex::
      0001BA 88               [ 1]  340 	push a 
      0001BB 4E               [ 1]  341 	swap a 
      0001BC CD 01 AF         [ 4]  342 	call to_hex_char 
      0001BF CD 00 DF         [ 4]  343 	call putc 
      0001C2 84               [ 1]  344     pop a  
      0001C3 CD 01 AF         [ 4]  345 	call to_hex_char
      0001C6 CD 00 DF         [ 4]  346 	call putc   
      0001C9 81               [ 4]  347 	ret 
                                    348 
                                    349 ;------------------------------
                                    350 ; print A in decimal base 
                                    351 ; not space after, no leading 
                                    352 ; zero.
                                    353 ; input:
                                    354 ;    A    int8 to print 
                                    355 ;-------------------------------
      0001CA                        356 print_dec:
      0001CA 89               [ 2]  357 	pushw x 
      0001CB 5F               [ 1]  358 	clrw x 
      0001CC 97               [ 1]  359 	ld xl,a 
      0001CD A6 0A            [ 1]  360 	ld a,#10
      0001CF 62               [ 2]  361 	div x,a  
      0001D0 88               [ 1]  362 	push a 
      0001D1 A6 0A            [ 1]  363 	ld a,#10 
      0001D3 62               [ 2]  364 	div x,a 
      0001D4 88               [ 1]  365 	push a 
      0001D5 9F               [ 1]  366 	ld a,xl 
      0001D6 4D               [ 1]  367 	tnz a 
      0001D7 27 03            [ 1]  368 	jreq 1$ 
      0001D9 CD 01 E9         [ 4]  369 	call prt_digit 
      0001DC 84               [ 1]  370 1$: pop a 
      0001DD 4D               [ 1]  371 	tnz a 
      0001DE 27 03            [ 1]  372 	jreq 2$ 
      0001E0 CD 01 E9         [ 4]  373 	call prt_digit 
      0001E3 84               [ 1]  374 2$:	pop a 
      0001E4 CD 01 E9         [ 4]  375 	call prt_digit 
      0001E7 85               [ 2]  376 	popw x 
      0001E8 81               [ 4]  377 	ret 
      0001E9                        378 prt_digit:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      0001E9 AB 30            [ 1]  379 	add a,#'0 
      0001EB CD 00 DF         [ 4]  380 	call putc 
      0001EE 81               [ 4]  381 	ret 
                                    382 
                                    383 
                                    384 ;------------------------
                                    385 ; print int8 
                                    386 ; input:
                                    387 ;    A    int8 
                                    388 ; output:
                                    389 ;    none 
                                    390 ;-----------------------
      0001EF                        391 prt_i8:
      0001EF 5F               [ 1]  392 	clrw x 
      0001F0 97               [ 1]  393 	ld xl,a  
                                    394 
                                    395 
                                    396 ;------------------------------------
                                    397 ; print integer  
                                    398 ; input:
                                    399 ;	X  		    integer to print 
                                    400 ;	'base' 		numerical base for conversion 
                                    401 ;    A 			signed||unsigned conversion
                                    402 ;  output:
                                    403 ;    A          string length
                                    404 ;------------------------------------
      0001F1                        405 print_int::
      0001F1                        406 	_ldaz base 
      0001F1 B6 00                    1     .byte 0xb6,base 
      0001F3 A0 10            [ 1]  407 	sub a,#16 
      0001F5 27 02            [ 1]  408 	jreq 1$
      0001F7 A6 FF            [ 1]  409 	ld a,#255  ; signed conversion  when base 10 
      0001F9                        410 1$:
      0001F9 CD 02 02         [ 4]  411     call itoa  ; conversion entier en  .asciz
      0001FC 88               [ 1]  412 	push a 
      0001FD CD 01 16         [ 4]  413 	call puts
      000200 84               [ 1]  414 	pop a 
      000201 81               [ 4]  415     ret	
                                    416 
                                    417 ;------------------------------------
                                    418 ; convert integer in x to string
                                    419 ; input:
                                    420 ;   'base'	conversion base 
                                    421 ;	X   	integer to convert
                                    422 ;   A       0=unsigned, else signed 
                                    423 ; output:
                                    424 ;   X  		pointer to first char of string
                                    425 ;   A       string length
                                    426 ; use:
                                    427 ;   pad     to build string 
                                    428 ;------------------------------------
                           000001   429 	SIGN=1  ; 1 byte, integer sign 
                           000002   430 	LEN=SIGN+1   ; 1 byte, string length 
                           000002   431 	VSIZE=2 ;locals size
      000202                        432 itoa::
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000202 90 89            [ 2]  433 	pushw y 
      000204                        434 	_vars VSIZE
      000204 52 02            [ 2]    1     sub sp,#VSIZE 
      000206 0F 02            [ 1]  435 	clr (LEN,sp) ; string length  
      000208 0F 01            [ 1]  436 	clr (SIGN,sp)    ; sign
      00020A 4D               [ 1]  437 	tnz a
      00020B 27 06            [ 1]  438 	jreq 1$ ; unsigned conversion  
      00020D 5D               [ 2]  439 	tnzw x 
      00020E 2A 03            [ 1]  440 	jrpl 1$ 
      000210 03 01            [ 1]  441 	cpl (SIGN,sp)
      000212 50               [ 2]  442 	negw x 
      000213                        443 1$:
                                    444 ; initialize string pointer 
                                    445 ; build string at end of pad  
      000213 90 AE 17 40      [ 2]  446 	ldw y,#pad 
      000217 72 A9 00 40      [ 2]  447 	addw y,#PAD_SIZE 
      00021B 90 5A            [ 2]  448 	decw y 
      00021D 90 7F            [ 1]  449 	clr (y)
      00021F A6 20            [ 1]  450 	ld a,#SPACE
      000221 90 5A            [ 2]  451 	decw y
      000223 90 F7            [ 1]  452 	ld (y),a 
      000225 0C 02            [ 1]  453 	inc (LEN,sp)
      000227                        454 itoa_loop:
      000227                        455     _ldaz base 
      000227 B6 00                    1     .byte 0xb6,base 
      000229 62               [ 2]  456     div x,a 
      00022A AB 30            [ 1]  457     add a,#'0  ; remainder of division
      00022C A1 3A            [ 1]  458     cp a,#'9+1
      00022E 2B 02            [ 1]  459     jrmi 2$
      000230 AB 07            [ 1]  460     add a,#7 
      000232                        461 2$:	
      000232 90 5A            [ 2]  462 	decw y
      000234 90 F7            [ 1]  463     ld (y),a
      000236 0C 02            [ 1]  464 	inc (LEN,sp)
                                    465 ; if x==0 conversion done
      000238 5D               [ 2]  466 	tnzw x 
      000239 26 EC            [ 1]  467     jrne itoa_loop
      00023B                        468 	_ldaz base 
      00023B B6 00                    1     .byte 0xb6,base 
      00023D A0 0A            [ 1]  469 	sub a,#10 
      00023F 27 04            [ 1]  470 	jreq 3$
      000241 A6 24            [ 1]  471 	ld a,#'$ 
      000243 20 06            [ 2]  472 	jra 4$
      000245                        473 3$:
      000245 7B 01            [ 1]  474 	ld a,(SIGN,sp)
      000247 27 08            [ 1]  475     jreq 10$
      000249 A6 2D            [ 1]  476     ld a,#'-
      00024B                        477 4$:
      00024B 90 5A            [ 2]  478     decw y
      00024D 90 F7            [ 1]  479     ld (y),a
      00024F 0C 02            [ 1]  480 	inc (LEN,sp)
      000251                        481 10$:
      000251 7B 02            [ 1]  482 	ld a,(LEN,sp)
      000253 93               [ 1]  483 	ldw x,y 
      000254                        484 	_drop VSIZE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000254 5B 02            [ 2]    1     addw sp,#VSIZE 
      000256 90 85            [ 2]  485 	popw y 
      000258 81               [ 4]  486 	ret
                                    487 
                                    488 ;--------------------------
                                    489 ; convert lower letters 
                                    490 ; to upper case 
                                    491 ; input:
                                    492 ;    A 
                                    493 ; output:
                                    494 ;    A 
                                    495 ;-------------------------
      000259                        496 to_upper:
      000259 A1 61            [ 1]  497 	cp a,#'a 
      00025B 2B 06            [ 1]  498 	jrmi 9$ 
      00025D A1 7B            [ 1]  499 	cp a,#'z+1 
      00025F 2A 02            [ 1]  500 	jrpl 9$ 
      000261 A4 DF            [ 1]  501 	and a,#0xDF 
      000263                        502 9$:
      000263 81               [ 4]  503 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2025
                                      3 ; This file is part of eeProg 
                                      4 ;
                                      5 ;     eeProg is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     eeProg is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with eeProg.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 
                                     20 ;;---------------------------------------
                                     21 ;; at28C64B || at28c256  EEPROM programmer 
                                     22 ;;--------------------------------------
                                     23 
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 ;;   COMMENTS 
                                     26 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
                                     27 ;; 1) Apple I keyboard interface was setting 
                                     28 ;;    setting bit 7 to 1 
                                     29 ;;     no need for it here 
                                     30 ;; 2) STM8 have 16 bits X,Y registers 
                                     31 ;;    I use this facility to avoid page 0
                                     32 ;;    pointers  
                                     33 ;; 3) STM8 have stack relative addressing 
                                     34 ;;    also very helpfull to avoid global 
                                     35 ;;    variables in RAM.  
                                     36 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     37 
                                     38     .module EEPROG  
                                     39 
                                     40 
                           00501E    41     ADDR_HIGH=PG_ODR 
                           00500F    42     ADDR_LOW=PD_ODR 
                           005005    43     DATA_ODR=PB_ODR
                           005006    44     DATA_IDR=PB_IDR 
                           005007    45     DATA_DDR=PB_DDR
                           005008    46     DATA_CR1=PB_CR1 
                           005009    47     DATA_CR2=PB_CR2  
                           00500A    48     EEPROM_CTRL=PC_ODR 
                           000001    49     EEPROM_NCE=BIT1 ; eeprom enable 
                           000002    50     EEPROM_NOE=BIT2 ; eeprom output enable 
                           000003    51     EEPROM_NWE=BIT3 ; eeprom write enable 
                                     52 
                           000040    53     EEPROM_PAGE_SIZE=64
                                     54 
                                     55 ;--------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



                                     56 ;     MACROS 
                                     57 ;--------------------------------
                                     58 
                                     59     ; reset eeprom ~CE bit 
                                     60     ; activate eeprom
                                     61     ; must be in this state 
                                     62     ; for read/prog operations  
                                     63     .macro _eeprom_enable  
                                     64         bres EEPROM_CTRL,#EEPROM_NCE 
                                     65     .endm 
                                     66 
                                     67     ; set eeprom ~CE bit 
                                     68     ; put eeprom in low power mode 
                                     69     ; data pin are in hi-z state 
                                     70     ; can't be read/prog in this state 
                                     71     .macro _eeprom_disable 
                                     72         bset EEPROM_CTRL,#EEPROM_NCE
                                     73     .endm 
                                     74 
                                     75     ; reset eeprom ~OE bit
                                     76     ; must be low to read eeprom  
                                     77     .macro _eeprom_enabe_output 
                                     78         bres EEPROM_CTRL,#EEPROM_NOE 
                                     79     .endm 
                                     80 
                                     81     ; set eeprom ~OE bit
                                     82     ; must be high to program eeprom  
                                     83     .macro _eeprom_disable_output 
                                     84         bset EEPROM_CTRL,#EEPROM_NOE
                                     85     .endm 
                                     86 
                                     87     ; reset eeprom ~WE bit 
                                     88     .macro _eeprom_we_low  
                                     89         bres EEPROM_CTRL,#EEPROM_NWE
                                     90     .endm 
                                     91 
                                     92     ; set eeprom ~WE bit 
                                     93     .macro _eeprom_we_high 
                                     94         bset EEPROM_CTRL,#EEPROM_NWE
                                     95     .endm 
                                     96 
                                     97     ; eeprom programming delay 
                                     98     ; 11msec per 64 bytes page 
                                     99     .macro _prog_delay 
                                    100         ld a,#11
                                    101         _straz timer+1 
                                    102         bset flags,#FTIMER 
                                    103         btjf flags,#FTIMER,.
                                    104     .endm 
                                    105 
                                    106     ; set DATA port as output 
                                    107     .macro _data_output 
                                    108         ld a,#255 
                                    109         ld DATA_CR1,a ; push pull output mode 
                                    110         ld DATA_CR2,a ; high_speed  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



                                    111         ld DATA_DDR,a ; output mode 
                                    112     .endm 
                                    113 
                                    114     ; set DATA port as input 
                                    115     .macro _data_input
                                    116         clr DATA_CR1  ; floating input
                                    117         clr DATA_CR2  ; disable ineterrupt
                                    118         clr DATA_DDR  ; input mode
                                    119     .endm 
                                    120 
                                    121     ;configure data port for output 
                                    122     ; and enable eeprom ~OE bit.
                                    123     .macro _config_write 
                                    124         _data_output
                                    125         _eeprom_disable_output
                                    126     .endm 
                                    127 
                                    128     ; configure data port for input 
                                    129     ; and disable eeprom ~OE bit 
                                    130     .macro _config_read 
                                    131         _data_input
                                    132         _eeprom_enabe_output
                                    133     .endm 
                                    134 
                                    135     ; data in A 
                                    136     .macro _eeprom_write  
                                    137         _eeprom_we_low 
                                    138         nop 
                                    139         nop 
                                    140         ld DATA_ODR,a
                                    141         nop
                                    142         nop 
                                    143         _eeprom_we_high   
                                    144     .endm 
                                    145 
                                    146     ; read eeprom data in A 
                                    147     .macro _eeprom_read  
                                    148         ld a,DATA_IDR  
                                    149     .endm 
                                    150 
                                    151 
                                    152 ;;--------------------------------------
                                    153     .area CODE
                                    154 ;;--------------------------------------
                                    155 
                                    156 
                                    157 ;--------------------------------------------------
                                    158 ; command line interface
                                    159 ; input formats:
                                    160 ;       hex_number  -> display byte at that address 
                                    161 ;       hex_number.hex_number -> display bytes in that range 
                                    162 ;       hex_number: hex_byte [hex_byte]*  -> write to EEPROM data bytes  
                                    163 ;       hex_number"STRING   write string in EEPROM 
                                    164 ;       hex_numberXhex_number  erase range filling eeprom with FF 
                                    165 ;----------------------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



                                    166 ; operatiing modes 
                           000000   167     NOP=0
                           000001   168     READ=1 ; single address or block
                           000002   169     STORE=2 
                           000003   170     ERASE=3 ; fill range with 0xFF 
                                    171 
                                    172     ; get next character from input buffer 
                                    173     .macro _next_char 
                                    174     ld a,(y)
                                    175     incw y 
                                    176     .endm ; 4 bytes, 2 cy 
                                    177 
                                    178 
                                    179 ;---------------------------
                                    180 ; initialize ports used 
                                    181 ; to interface to EEPROM 
                                    182 ; PORT G  address bits 15:8 
                                    183 ; PORT D  address bits 7:0 
                                    184 ; PORT B  data bits 
                                    185 ; PORT C  bits 1,2,3 as controls lines 
                                    186 ;----------------------------  
      000264                        187 init_ports:
                                    188 ; PORT G (ADDR_HIGH) as output push-pull 
      000264 A6 FF            [ 1]  189     ld a,#255 
      000266 C7 50 20         [ 1]  190     ld PG_DDR,a ; output 
      000269 C7 50 21         [ 1]  191     ld PG_CR1,a ; push-pull 
      00026C C7 50 22         [ 1]  192     ld PG_CR2,a ; high speed 
      00026F 72 5F 50 1E      [ 1]  193     clr ADDR_HIGH     
                                    194 ; PORT D (ADDR_LOW) as outpout push-pull 
      000273 C7 50 11         [ 1]  195     ld PD_DDR,a ; output 
      000276 C7 50 12         [ 1]  196     ld PD_CR1,a ; push-pull 
      000279 C7 50 13         [ 1]  197     ld PD_CR2,a ; high speed 
      00027C 72 5F 50 0F      [ 1]  198     clr ADDR_LOW  
                                    199 ; PORT C (control lines) bits 1,2,3 as output push-pull 
      000280 A6 0E            [ 1]  200     ld a,#(1<<EEPROM_NCE)+(1<<EEPROM_NOE)+(1<<EEPROM_NWE)
      000282 C7 50 0A         [ 1]  201     ld PC_ODR,a ; all control lines to high 
      000285 C7 50 0D         [ 1]  202     ld PC_CR1,a ; push-pull 
      000288 C7 50 0E         [ 1]  203     ld PC_CR2,a ; high-speed 
      00028B C7 50 0C         [ 1]  204     ld PC_DDR,a ; output 
      00028E                        205     _eeprom_enable 
      00028E 72 13 50 0A      [ 1]    1         bres EEPROM_CTRL,#EEPROM_NCE 
      000292                        206     _config_read
      000292                          1         _data_input
      000292 72 5F 50 08      [ 1]    1         clr DATA_CR1  ; floating input
      000296 72 5F 50 09      [ 1]    2         clr DATA_CR2  ; disable ineterrupt
      00029A 72 5F 50 07      [ 1]    3         clr DATA_DDR  ; input mode
      00029E                          2         _eeprom_enabe_output
      00029E 72 15 50 0A      [ 1]    1         bres EEPROM_CTRL,#EEPROM_NOE 
      0002A2 81               [ 4]  207     ret 
                                    208 
                                    209 ;----------------------
                                    210 ;  eeProg entry point 
                                    211 ;---------------------
      0002A3 65 65 50 72 6F 67 2C   212 EEPROG_tibFO: .asciz "eeProg, Copyright Jacques Deschenes, 2025\nversion "
             20 43 6F 70 79 72 69
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



             67 68 74 20 4A 61 63
             71 75 65 73 20 44 65
             73 63 68 65 6E 65 73
             2C 20 32 30 32 35 0A
             76 65 72 73 69 6F 6E
             20 00
      0002D6                        213 eeProg:
      0002D6 CD 01 39         [ 4]  214     call clr_screen
      0002D9 AE 02 A3         [ 2]  215     ldw x,#EEPROG_tibFO 
      0002DC CD 01 16         [ 4]  216     call puts 
      0002DF A6 01            [ 1]  217     ld a,#MAJOR
      0002E1 CD 01 CA         [ 4]  218     call print_dec 
      0002E4 A6 2E            [ 1]  219     ld a,#'. 
      0002E6 CD 00 DF         [ 4]  220     call putc 
      0002E9 A6 00            [ 1]  221     ld a,#MINOR 
      0002EB CD 01 CA         [ 4]  222     call print_dec
      0002EE A6 2E            [ 1]  223     ld a,#'. 
      0002F0 CD 00 DF         [ 4]  224     call putc 
      0002F3 A6 00            [ 1]  225     ld a,#REV 
      0002F5 CD 01 CA         [ 4]  226     call print_dec
      0002F8 CD 01 33         [ 4]  227     call new_line 
      0002FB CD 02 64         [ 4]  228     call init_ports 
      0002FE 4F               [ 1]  229     clr a 
      0002FF                        230     _clrz xamadr 
      0002FF 3F 2E                    1     .byte 0x3f, xamadr 
      000301                        231     _clrz storadr 
      000301 3F 30                    1     .byte 0x3f, storadr 
      000303                        232     _clrz last  
      000303 3F 32                    1     .byte 0x3f, last 
      000305                        233 cli: 
      000305 CD 01 33         [ 4]  234     call new_line
      000308 A6 23            [ 1]  235     ld a,#'# 
      00030A CD 00 DF         [ 4]  236     call putc ; prompt character 
      00030D 4F               [ 1]  237     clr a
      00030E 72 5F 16 C0      [ 1]  238     clr tib
      000312 CD 01 56         [ 4]  239     call readln
                                    240 ; analyze input line      
      000315 90 93            [ 1]  241     ldw y,x  
      000317                        242     _clrz mode 
      000317 3F 2D                    1     .byte 0x3f, mode 
      000319                        243 next_char:     
      000319                        244     _next_char
      000319 90 F6            [ 1]    1     ld a,(y)
      00031B 90 5C            [ 1]    2     incw y 
      00031D 4D               [ 1]  245     tnz a     
      00031E 26 0B            [ 1]  246     jrne parse01
                                    247 ; at end of line 
      000320 72 5D 00 2D      [ 1]  248      tnz mode 
      000324 27 DF            [ 1]  249      jreq cli 
      000326 CD 03 AC         [ 4]  250     call exam_block 
      000329 20 DA            [ 2]  251     jra cli 
      00032B                        252 parse01:
      00032B A1 22            [ 1]  253     cp a,#'" 
      00032D 26 05            [ 1]  254     jrne 1$ 
      00032F CD 04 95         [ 4]  255     call write_string
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000332 20 D1            [ 2]  256     jra cli 
      000334                        257 1$: 
      000334 A1 58            [ 1]  258     cp a,#'X 
      000336 26 06            [ 1]  259     jrne 2$ 
      000338 A6 03            [ 1]  260     ld a,#ERASE 
      00033A                        261     _straz mode 
      00033A B7 2D                    1     .byte 0xb7,mode 
      00033C 20 DB            [ 2]  262     jra next_char 
      00033E                        263 2$:    
      00033E A1 3A            [ 1]  264     cp a,#':
      000340 26 05            [ 1]  265     jrne 5$ 
      000342 CD 03 7A         [ 4]  266     call write_eeprom 
      000345 20 BE            [ 2]  267     jra cli     
      000347                        268 5$:
      000347 A1 2E            [ 1]  269     cp a,#'. 
      000349 26 06            [ 1]  270     jrne 7$ 
      00034B A6 01            [ 1]  271     ld a,#READ 
      00034D                        272     _straz mode  
      00034D B7 2D                    1     .byte 0xb7,mode 
                                    273 ;    tnz mode 
                                    274 ;    jreq cli ; here mode should be set to 1 
      00034F 20 C8            [ 2]  275     jra next_char 
      000351                        276 7$: 
      000351 A1 20            [ 1]  277     cp a,#SPACE 
      000353 27 C4            [ 1]  278     jreq next_char ; skip separator and invalids characters  
      000355 CD 03 E5         [ 4]  279     call parse_hex ; maybe an hexadecimal number 
      000358 4D               [ 1]  280     tnz a ; unknown token ignore rest of line
      000359 27 AA            [ 1]  281     jreq cli 
      00035B 72 5D 00 2D      [ 1]  282     tnz mode 
      00035F 27 11            [ 1]  283     jreq 9$
      000361 A6 03            [ 1]  284     ld a,#ERASE 
      000363 C1 00 2D         [ 1]  285     cp a,mode 
      000366 26 05            [ 1]  286     jrne 8$
      000368 CD 04 F2         [ 4]  287     call erase_range 
      00036B 20 98            [ 2]  288     jra cli
      00036D                        289 8$:
      00036D CD 03 AC         [ 4]  290     call exam_block
      000370 20 A7            [ 2]  291     jra next_char
      000372                        292 9$:
      000372                        293     _strxz xamadr 
      000372 BF 2E                    1     .byte 0xbf,xamadr 
      000374                        294     _strxz storadr
      000374 BF 30                    1     .byte 0xbf,storadr 
      000376                        295     _incz mode
      000376 3C 2D                    1     .byte 0x3c, mode 
      000378 20 9F            [ 2]  296     jra next_char 
                                    297 
                                    298 
                                    299 ;-------------------------------------
                                    300 ; write to eeprom 
                                    301 ; write data to pad then transfert to eeprom  
                                    302 ; read byte list from input buffer
                                    303 ; all bytes must be in same page.
                                    304 ; i.e. only bit 5:0 of address change
                                    305 ; maximum 64 bytes at once.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



                                    306 ; if delay between _eeprom_write >150µSec 
                                    307 ; programming phase start.
                                    308 ;--------------------------------------
                           000001   309     PAGE_CNTR=1
      00037A                        310 write_eeprom:
      00037A 4B 40            [ 1]  311     push #EEPROM_PAGE_SIZE ; bytes per eeprom page 
                                    312 ; load data in pad 
      00037C AE 17 40         [ 2]  313     ldw x,#pad 
      00037F                        314     _strxz ptr16
      00037F BF 08                    1     .byte 0xbf,ptr16 
      000381                        315 1$: 
                                    316 ; skip spaces 
      000381                        317     _next_char 
      000381 90 F6            [ 1]    1     ld a,(y)
      000383 90 5C            [ 1]    2     incw y 
      000385 A1 20            [ 1]  318     cp a,#SPACE 
      000387 27 F8            [ 1]  319     jreq 1$ 
      000389 CD 03 E5         [ 4]  320     call parse_hex
      00038C 4D               [ 1]  321     tnz a 
      00038D 27 0F            [ 1]  322     jreq 9$
      00038F 9F               [ 1]  323     ld a,xl 
      000390 72 C7 00 08      [ 4]  324     ld [ptr16],a 
      000394 72 5C 00 09      [ 1]  325     inc ptr8  
      000398 0A 01            [ 1]  326     dec (PAGE_CNTR,sp)
      00039A 27 02            [ 1]  327     jreq 9$ 
      00039C 20 E3            [ 2]  328     jra 1$ 
      00039E A6 40            [ 1]  329 9$: ld a,#64 
      0003A0 10 01            [ 1]  330     sub a,(PAGE_CNTR,sp)
      0003A2 27 03            [ 1]  331     jreq 10$
      0003A4 CD 04 37         [ 4]  332     call prog_eeprom 
      0003A7                        333 10$:
      0003A7                        334     _clrz mode 
      0003A7 3F 2D                    1     .byte 0x3f, mode 
      0003A9                        335     _drop 1 
      0003A9 5B 01            [ 2]    1     addw sp,#1 
      0003AB 81               [ 4]  336     ret 
                                    337 
                                    338 ;-------------------------------------------
                                    339 ; display memory in range 'xamadr'...'last' 
                                    340 ;-------------------------------------------    
                           000001   341     ROW_SIZE=1
                           000001   342     VSIZE=1
      0003AC                        343 exam_block:
      0003AC                        344     _vars VSIZE
      0003AC 52 01            [ 2]    1     sub sp,#VSIZE 
      0003AE                        345     _config_read ; to read data from eeprom  
      0003AE                          1         _data_input
      0003AE 72 5F 50 08      [ 1]    1         clr DATA_CR1  ; floating input
      0003B2 72 5F 50 09      [ 1]    2         clr DATA_CR2  ; disable ineterrupt
      0003B6 72 5F 50 07      [ 1]    3         clr DATA_DDR  ; input mode
      0003BA                          2         _eeprom_enabe_output
      0003BA 72 15 50 0A      [ 1]    1         bres EEPROM_CTRL,#EEPROM_NOE 
      0003BE                        346     _ldxz xamadr
      0003BE BE 2E                    1     .byte 0xbe,xamadr 
      0003C0                        347 new_row: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      0003C0 A6 10            [ 1]  348     ld a,#16
      0003C2 6B 01            [ 1]  349     ld (ROW_SIZE,sp),a ; bytes per row 
      0003C4 CD 04 16         [ 4]  350     call print_adr ; display address and first byte of row 
      0003C7                        351 row:
      0003C7 CD 04 2A         [ 4]  352     call print_mem ; display byte at address  
      0003CA C3 00 32         [ 2]  353     cpw x,last 
      0003CD 27 0C            [ 1]  354     jreq 9$ 
      0003CF 5C               [ 1]  355     incw x 
      0003D0 27 09            [ 1]  356     jreq 9$ ; overflow 
      0003D2 0A 01            [ 1]  357     dec (ROW_SIZE,sp)
      0003D4 26 F1            [ 1]  358     jrne row  
      0003D6 CD 01 33         [ 4]  359     call new_line       
      0003D9 20 E5            [ 2]  360     jra new_row 
      0003DB 5C               [ 1]  361 9$: incw x
      0003DC                        362     _strxz xamadr
      0003DC BF 2E                    1     .byte 0xbf,xamadr 
      0003DE                        363     _strxz last 
      0003DE BF 32                    1     .byte 0xbf,last 
      0003E0                        364     _clrz mode 
      0003E0 3F 2D                    1     .byte 0x3f, mode 
      0003E2                        365     _drop VSIZE 
      0003E2 5B 01            [ 2]    1     addw sp,#VSIZE 
      0003E4 81               [ 4]  366     ret  
                                    367 
                                    368 ;----------------------------
                                    369 ; parse hexadecimal number 
                                    370 ; from input buffer 
                                    371 ; input:
                                    372 ;    A   first character 
                                    373 ;    Y   pointer to TIB 
                                    374 ; output: 
                                    375 ;    X     number 
                                    376 ;    Y     point after number 
                                    377 ;-----------------------------      
      0003E5                        378 parse_hex:
      0003E5 4B 00            [ 1]  379     push #0 ; digits count 
      0003E7 5F               [ 1]  380     clrw x
      0003E8                        381 1$:    
      0003E8 A1 47            [ 1]  382     cp a,#'G 
      0003EA 2A 21            [ 1]  383     jrpl 9$ 
      0003EC A0 30            [ 1]  384     sub a,#'0
      0003EE 2B 1D            [ 1]  385     jrmi 9$ 
      0003F0 A1 0A            [ 1]  386     cp a,#10 
      0003F2 2B 06            [ 1]  387     jrmi 2$   ; 0..9 
      0003F4 A1 11            [ 1]  388     cp a,#17 
      0003F6 2B 15            [ 1]  389     jrmi 9$ 
      0003F8 A0 07            [ 1]  390     sub a,#7 
      0003FA                        391 2$: ; shift hex digit in X 
      0003FA 4B 04            [ 1]  392     push #4 ; bit count 
      0003FC 4E               [ 1]  393     swap a ; bits in 7:4 
      0003FD                        394 3$:
      0003FD 48               [ 1]  395     sll a 
      0003FE 59               [ 2]  396     rlcw x 
      0003FF 0A 01            [ 1]  397     dec (1,sp)
      000401 26 FA            [ 1]  398     jrne 3$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      000403 84               [ 1]  399     pop a
      000404 0C 01            [ 1]  400     inc (1,sp) ; digits count  
      000406                        401     _next_char 
      000406 90 F6            [ 1]    1     ld a,(y)
      000408 90 5C            [ 1]    2     incw y 
      00040A 4D               [ 1]  402     tnz a 
      00040B 26 DB            [ 1]  403     jrne 1$
      00040D                        404 9$: ; end of hex number
      00040D 90 5A            [ 2]  405     decw y  ; put back last character  
      00040F 84               [ 1]  406     pop a ; hex digits count
      000410 4D               [ 1]  407     tnz a 
      000411 27 02            [ 1]  408     jreq 10$ ; no hex number 
      000413                        409     _strxz last 
      000413 BF 32                    1     .byte 0xbf,last 
      000415                        410 10$:
      000415 81               [ 4]  411     ret 
                                    412 
                                    413 ;-----------------------------------
                                    414 ;  print address in xamadr variable
                                    415 ;  followed by ': '  
                                    416 ;  input: 
                                    417 ;    X     address to print 
                                    418 ;  output:
                                    419 ;   X      not modified 
                                    420 ;-------------------------------------
      000416                        421 print_adr: 
      000416 AD 09            [ 4]  422     callr print_word 
      000418 A6 3A            [ 1]  423     ld a,#': 
      00041A CD 00 DF         [ 4]  424     call putc 
      00041D CD 01 44         [ 4]  425     call space
      000420 81               [ 4]  426     ret 
                                    427 
                                    428 ;-------------------------------
                                    429 ;  print hexadecimal number 
                                    430 ; input:
                                    431 ;    X  number to print 
                                    432 ; output:
                                    433 ;    none 
                                    434 ;--------------------------------
      000421                        435 print_word: 
      000421 9E               [ 1]  436     ld a,xh
      000422 CD 01 BA         [ 4]  437     call print_hex  
      000425 9F               [ 1]  438     ld a,xl 
      000426 CD 01 BA         [ 4]  439     call print_hex  
      000429 81               [ 4]  440     ret 
                                    441 
                                    442 ;-------------------------------------
                                    443 ;  print byte at memory location 
                                    444 ;  pointed by X followed by ' ' 
                                    445 ;  input:
                                    446 ;     X     memory address 
                                    447 ;  output:
                                    448 ;    X      not modified 
                                    449 ;-------------------------------------
      00042A                        450 print_mem:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      00042A CD 04 8A         [ 4]  451     call eeprom_addr 
      00042D                        452     _eeprom_read 
      00042D C6 50 06         [ 1]    1         ld a,DATA_IDR  
      000430 CD 01 BA         [ 4]  453     call print_hex  
      000433 CD 01 44         [ 4]  454     call space 
      000436 81               [ 4]  455     ret 
                                    456 
                                    457 
                                    458 ;------------------------------
                                    459 ; program data in pad to eeprom 
                                    460 ; input:
                                    461 ;    A     byte count 
                                    462 ;    pad   data 
                                    463 ;-------------------------------
      000437                        464 prog_eeprom:
      000437 88               [ 1]  465     push a ; bytes to program 
      000438                        466     _config_write
      000438                          1         _data_output
      000438 A6 FF            [ 1]    1         ld a,#255 
      00043A C7 50 08         [ 1]    2         ld DATA_CR1,a ; push pull output mode 
      00043D C7 50 09         [ 1]    3         ld DATA_CR2,a ; high_speed  
      000440 C7 50 07         [ 1]    4         ld DATA_DDR,a ; output mode 
      000443                          2         _eeprom_disable_output
      000443 72 14 50 0A      [ 1]    1         bset EEPROM_CTRL,#EEPROM_NOE
      000447 90 AE 17 40      [ 2]  467     ldw y,#pad 
      00044B                        468     _ldxz storadr 
      00044B BE 30                    1     .byte 0xbe,storadr 
      00044D                        469 1$:
      00044D CD 04 8A         [ 4]  470     call eeprom_addr 
      000450 5C               [ 1]  471     incw x 
      000451 90 F6            [ 1]  472     ld a,(y)
      000453 90 5C            [ 1]  473     incw y 
      000455                        474     _eeprom_write 
      000455                          1         _eeprom_we_low 
      000455 72 17 50 0A      [ 1]    1         bres EEPROM_CTRL,#EEPROM_NWE
      000459 9D               [ 1]    2         nop 
      00045A 9D               [ 1]    3         nop 
      00045B C7 50 05         [ 1]    4         ld DATA_ODR,a
      00045E 9D               [ 1]    5         nop
      00045F 9D               [ 1]    6         nop 
      000460                          7         _eeprom_we_high   
      000460 72 16 50 0A      [ 1]    1         bset EEPROM_CTRL,#EEPROM_NWE
      000464 0A 01            [ 1]  475     dec (1,sp)
      000466 26 E5            [ 1]  476     jrne 1$ 
      000468                        477     _strxz storadr 
      000468 BF 30                    1     .byte 0xbf,storadr 
      00046A                        478     _prog_delay
      00046A A6 0B            [ 1]    1         ld a,#11
      00046C                          2         _straz timer+1 
      00046C B7 06                    1     .byte 0xb7,timer+1 
      00046E 72 12 00 0A      [ 1]    3         bset flags,#FTIMER 
      000472 72 03 00 0A FB   [ 2]    4         btjf flags,#FTIMER,.
      000477                        479     _config_read 
      000477                          1         _data_input
      000477 72 5F 50 08      [ 1]    1         clr DATA_CR1  ; floating input
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      00047B 72 5F 50 09      [ 1]    2         clr DATA_CR2  ; disable ineterrupt
      00047F 72 5F 50 07      [ 1]    3         clr DATA_DDR  ; input mode
      000483                          2         _eeprom_enabe_output
      000483 72 15 50 0A      [ 1]    1         bres EEPROM_CTRL,#EEPROM_NOE 
      000487                        480     _drop 1
      000487 5B 01            [ 2]    1     addw sp,#1 
      000489 81               [ 4]  481     ret 
                                    482 
                                    483 ;---------------------------
                                    484 ; set eeprom address 
                                    485 ; input:
                                    486 ;    X     address 
                                    487 ; output:
                                    488 ;    X     preserved 
                                    489 ;---------------------------
      00048A                        490 eeprom_addr:
      00048A 88               [ 1]  491     push a 
      00048B 9E               [ 1]  492     ld a,xh 
      00048C C7 50 1E         [ 1]  493     ld ADDR_HIGH,a 
      00048F 9F               [ 1]  494     ld a,xl 
      000490 C7 50 0F         [ 1]  495     ld ADDR_LOW,a 
      000493 84               [ 1]  496     pop a
      000494 81               [ 4]  497     ret 
                                    498 
                                    499 ;-----------------------------
                                    500 ; copy tib to eeprom as 
                                    501 ; .asciz 
                                    502 ; input: 
                                    503 ;   tib 
                                    504 ; string max length 63 char.
                                    505 ;-----------------------------
      000495                        506 write_string:
      000495                        507     _config_write 
      000495                          1         _data_output
      000495 A6 FF            [ 1]    1         ld a,#255 
      000497 C7 50 08         [ 1]    2         ld DATA_CR1,a ; push pull output mode 
      00049A C7 50 09         [ 1]    3         ld DATA_CR2,a ; high_speed  
      00049D C7 50 07         [ 1]    4         ld DATA_DDR,a ; output mode 
      0004A0                          2         _eeprom_disable_output
      0004A0 72 14 50 0A      [ 1]    1         bset EEPROM_CTRL,#EEPROM_NOE
      0004A4 93               [ 1]  508     ldw x,y 
      0004A5 CD 05 32         [ 4]  509     call strlen
      0004A8 4D               [ 1]  510     tnz a 
      0004A9 27 46            [ 1]  511     jreq 10$
      0004AB 4C               [ 1]  512     inc a 
      0004AC A1 40            [ 1]  513     cp a,#EEPROM_PAGE_SIZE
      0004AE 2B 02            [ 1]  514     jrmi 1$ 
      0004B0 A6 40            [ 1]  515     ld a,#PAD_SIZE 
      0004B2 88               [ 1]  516 1$: push a 
      0004B3                        517     _ldxz storadr 
      0004B3 BE 30                    1     .byte 0xbe,storadr 
      0004B5                        518 2$:
      0004B5 90 F6            [ 1]  519     ld a,(y)
      0004B7 90 5C            [ 1]  520     incw y 
      0004B9 CD 04 8A         [ 4]  521     call eeprom_addr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      0004BC 5C               [ 1]  522     incw x 
      0004BD                        523     _eeprom_write 
      0004BD                          1         _eeprom_we_low 
      0004BD 72 17 50 0A      [ 1]    1         bres EEPROM_CTRL,#EEPROM_NWE
      0004C1 9D               [ 1]    2         nop 
      0004C2 9D               [ 1]    3         nop 
      0004C3 C7 50 05         [ 1]    4         ld DATA_ODR,a
      0004C6 9D               [ 1]    5         nop
      0004C7 9D               [ 1]    6         nop 
      0004C8                          7         _eeprom_we_high   
      0004C8 72 16 50 0A      [ 1]    1         bset EEPROM_CTRL,#EEPROM_NWE
      0004CC 0A 01            [ 1]  524     dec (1,sp)
      0004CE 26 E5            [ 1]  525     jrne 2$
      0004D0                        526     _strxz storadr
      0004D0 BF 30                    1     .byte 0xbf,storadr 
      0004D2                        527     _prog_delay
      0004D2 A6 0B            [ 1]    1         ld a,#11
      0004D4                          2         _straz timer+1 
      0004D4 B7 06                    1     .byte 0xb7,timer+1 
      0004D6 72 12 00 0A      [ 1]    3         bset flags,#FTIMER 
      0004DA 72 03 00 0A FB   [ 2]    4         btjf flags,#FTIMER,.
      0004DF                        528     _config_read 
      0004DF                          1         _data_input
      0004DF 72 5F 50 08      [ 1]    1         clr DATA_CR1  ; floating input
      0004E3 72 5F 50 09      [ 1]    2         clr DATA_CR2  ; disable ineterrupt
      0004E7 72 5F 50 07      [ 1]    3         clr DATA_DDR  ; input mode
      0004EB                          2         _eeprom_enabe_output
      0004EB 72 15 50 0A      [ 1]    1         bres EEPROM_CTRL,#EEPROM_NOE 
      0004EF                        529     _drop 1  
      0004EF 5B 01            [ 2]    1     addw sp,#1 
      0004F1                        530 10$:
      0004F1 81               [ 4]  531     ret 
                                    532 
                                    533 ;----------------------------
                                    534 ;  erasse EEPROM range 
                                    535 ;  filling with 0xFF value 
                                    536 ;  cmd format: addr1Xaddr2 
                                    537 ;----------------------------
                           000001   538     COUNT=1
                           000002   539     VSIZE=2
      0004F2                        540 erase_range:
      0004F2                        541     _vars VSIZE 
      0004F2 52 02            [ 2]    1     sub sp,#VSIZE 
                                    542 ; fill pad with 0xFF
      0004F4 0F 01            [ 1]  543     clr (COUNT,sp)
      0004F6 A6 40            [ 1]  544     ld a,#EEPROM_PAGE_SIZE
      0004F8 6B 02            [ 1]  545     ld (COUNT+1,sp),a
      0004FA AE 17 40         [ 2]  546     ldw x,#pad 
      0004FD A6 FF            [ 1]  547     ld a,#0xff 
      0004FF                        548 1$: 
      0004FF F7               [ 1]  549     ld (x),a 
      000500 5C               [ 1]  550     incw x 
      000501 0A 02            [ 1]  551     dec (2,sp)
      000503 26 FA            [ 1]  552     jrne 1$ 
      000505                        553     _ldxz last 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      000505 BE 32                    1     .byte 0xbe,last 
      000507 72 B0 00 30      [ 2]  554     subw x,storadr 
      00050B 5C               [ 1]  555     incw x 
      00050C 1F 01            [ 2]  556     ldw (COUNT,sp),x ; count to erase 
      00050E                        557 2$:
      00050E AE 00 40         [ 2]  558     ldw x,#EEPROM_PAGE_SIZE 
      000511 13 01            [ 2]  559     cpw x,(COUNT,sp)
      000513 23 02            [ 2]  560     jrule 4$ 
      000515 1E 01            [ 2]  561     ldw x,(COUNT,sp)
      000517 9F               [ 1]  562 4$: ld a,xl 
      000518 88               [ 1]  563     push a 
      000519                        564     _ldxz storadr 
      000519 BE 30                    1     .byte 0xbe,storadr 
      00051B CD 04 37         [ 4]  565     call prog_eeprom 
      00051E 32 00 09         [ 1]  566     pop ptr8 
      000521 72 5F 00 08      [ 1]  567     clr ptr16 
      000525 1E 01            [ 2]  568     ldw x,(COUNT,sp) 
      000527 72 B0 00 08      [ 2]  569     subw x,ptr16
      00052B 1F 01            [ 2]  570     ldw (COUNT,sp),x  
      00052D 26 DF            [ 1]  571     jrne 2$ 
      00052F                        572     _drop VSIZE 
      00052F 5B 02            [ 2]    1     addw sp,#VSIZE 
      000531 81               [ 4]  573     ret 
                                    574 
                                    575 ;--------------------------
                                    576 ; return lenght of string
                                    577 ; input:
                                    578 ;    X   *.asciz 
                                    579 ; output:
                                    580 ;    A     length 
                                    581 ;    X     not changed 
                                    582 ;--------------------------
      000532                        583 strlen:
      000532 89               [ 2]  584     pushw x
      000533 4F               [ 1]  585     clr a 
      000534                        586 1$:
      000534 7D               [ 1]  587     tnz (x)
      000535 27 04            [ 1]  588     jreq 9$
      000537 4C               [ 1]  589     inc a 
      000538 5C               [ 1]  590     incw x 
      000539 20 F9            [ 2]  591     jra 1$
      00053B 85               [ 2]  592 9$: popw x
      00053C 81               [ 4]  593     ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |     ACK     =  000006     |     ADC_CR1 =  005401 
    ADC_CR1_=  000000     |     ADC_CR1_=  000001     |     ADC_CR1_=  000004 
    ADC_CR1_=  000005     |     ADC_CR1_=  000006     |     ADC_CR2 =  005402 
    ADC_CR2_=  000003     |     ADC_CR2_=  000004     |     ADC_CR2_=  000005 
    ADC_CR2_=  000006     |     ADC_CR2_=  000001     |     ADC_CR3 =  005403 
    ADC_CR3_=  000007     |     ADC_CR3_=  000006     |     ADC_CSR =  005400 
    ADC_CSR_=  000006     |     ADC_CSR_=  000004     |     ADC_CSR_=  000000 
    ADC_CSR_=  000001     |     ADC_CSR_=  000002     |     ADC_CSR_=  000003 
    ADC_CSR_=  000007     |     ADC_CSR_=  000005     |     ADC_DRH =  005404 
    ADC_DRL =  005405     |     ADC_TDRH=  005406     |     ADC_TDRL=  005407 
    ADDR_HIG=  00501E     |     ADDR_LOW=  00500F     |     AFR     =  004803 
    AFR0_ADC=  000000     |     AFR1_TIM=  000001     |     AFR2_CCO=  000002 
    AFR3_TIM=  000003     |     AFR4_TIM=  000004     |     AFR5_TIM=  000005 
    AFR6_I2C=  000006     |     AFR7_BEE=  000007     |     AWU_APR =  0050F1 
    AWU_CSR =  0050F0     |     AWU_CSR_=  000004     |     AWU_TBR =  0050F2 
    B0_MASK =  000001     |     B115200 =  000006     |     B19200  =  000003 
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
    B2_MASK =  000004     |     B38400  =  000004     |     B3_MASK =  000008 
    B460800 =  000008     |     B4800   =  000001     |     B4_MASK =  000010 
    B57600  =  000005     |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
    BAUD_RAT=  01C200     |     BEEP_BIT=  000004     |     BEEP_CSR=  0050F3 
    BEEP_MAS=  000010     |     BEEP_POR=  00000F     |     BELL    =  000007 
    BIT0    =  000000     |     BIT1    =  000001     |     BIT2    =  000002 
    BIT3    =  000003     |     BIT4    =  000004     |     BIT5    =  000005 
    BIT6    =  000006     |     BIT7    =  000007     |     BLOCK_SI=  000080 
    BOOT_ROM=  006000     |     BOOT_ROM=  007FFF     |     BRR1_VAL=  000008 
    BRR2_VAL=  00000B     |     BS      =  000008     |     CAN     =  000018 
    CAN_DGR =  005426     |     CAN_FPSR=  005427     |     CAN_IER =  005425 
    CAN_MCR =  005420     |     CAN_MSR =  005421     |     CAN_P0  =  005428 
    CAN_P1  =  005429     |     CAN_P2  =  00542A     |     CAN_P3  =  00542B 
    CAN_P4  =  00542C     |     CAN_P5  =  00542D     |     CAN_P6  =  00542E 
    CAN_P7  =  00542F     |     CAN_P8  =  005430     |     CAN_P9  =  005431 
    CAN_PA  =  005432     |     CAN_PB  =  005433     |     CAN_PC  =  005434 
    CAN_PD  =  005435     |     CAN_PE  =  005436     |     CAN_PF  =  005437 
    CAN_RFR =  005424     |     CAN_TPR =  005423     |     CAN_TSR =  005422 
    CC_C    =  000000     |     CC_H    =  000004     |     CC_I0   =  000003 
    CC_I1   =  000005     |     CC_N    =  000002     |     CC_V    =  000007 
    CC_Z    =  000001     |     CFG_GCR =  007F60     |     CFG_GCR_=  000001 
    CFG_GCR_=  000000     |     CHAR    =  000003     |     CLKOPT  =  004807 
    CLKOPT_C=  000002     |     CLKOPT_E=  000003     |     CLKOPT_P=  000000 
    CLKOPT_P=  000001     |     CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6 
    CLK_CKDI=  000000     |     CLK_CKDI=  000001     |     CLK_CKDI=  000002 
    CLK_CKDI=  000003     |     CLK_CKDI=  000004     |     CLK_CMSR=  0050C3 
    CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1     |     CLK_ECKR=  000000 
    CLK_ECKR=  000001     |     CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0 
    CLK_ICKR=  000002     |     CLK_ICKR=  000000     |     CLK_ICKR=  000001 
    CLK_ICKR=  000003     |     CLK_ICKR=  000004     |     CLK_ICKR=  000005 
    CLK_PCKE=  0050C7     |     CLK_PCKE=  000000     |     CLK_PCKE=  000001 
    CLK_PCKE=  000007     |     CLK_PCKE=  000005     |     CLK_PCKE=  000006 
    CLK_PCKE=  000004     |     CLK_PCKE=  000002     |     CLK_PCKE=  000003 
    CLK_PCKE=  0050CA     |     CLK_PCKE=  000003     |     CLK_PCKE=  000002 
    CLK_PCKE=  000007     |     CLK_SWCR=  0050C5     |     CLK_SWCR=  000000 
    CLK_SWCR=  000001     |     CLK_SWCR=  000002     |     CLK_SWCR=  000003 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]

Symbol Table

    CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4 
    CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2     |     COLON   =  00003A 
    COMMA   =  00002C     |     COUNT   =  000001     |     CPU_A   =  007F00 
    CPU_CCR =  007F0A     |     CPU_PCE =  007F01     |     CPU_PCH =  007F02 
    CPU_PCL =  007F03     |     CPU_SPH =  007F08     |     CPU_SPL =  007F09 
    CPU_XH  =  007F04     |     CPU_XL  =  007F05     |     CPU_YH  =  007F06 
    CPU_YL  =  007F07     |     CR      =  00000D     |     CTRL_A  =  000001 
    CTRL_B  =  000002     |     CTRL_C  =  000003     |     CTRL_D  =  000004 
    CTRL_E  =  000005     |     CTRL_F  =  000006     |     CTRL_G  =  000007 
    CTRL_H  =  000008     |     CTRL_I  =  000009     |     CTRL_J  =  00000A 
    CTRL_K  =  00000B     |     CTRL_L  =  00000C     |     CTRL_M  =  00000D 
    CTRL_N  =  00000E     |     CTRL_O  =  00000F     |     CTRL_P  =  000010 
    CTRL_Q  =  000011     |     CTRL_R  =  000012     |     CTRL_S  =  000013 
    CTRL_T  =  000014     |     CTRL_U  =  000015     |     CTRL_V  =  000016 
    CTRL_W  =  000017     |     CTRL_X  =  000018     |     CTRL_Y  =  000019 
    CTRL_Z  =  00001A     |     DATA_CR1=  005008     |     DATA_CR2=  005009 
    DATA_DDR=  005007     |     DATA_IDR=  005006     |     DATA_ODR=  005005 
    DC1     =  000011     |     DC2     =  000012     |     DC3     =  000013 
    DC4     =  000014     |     DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF 
    DEVID_BA=  0048CD     |     DEVID_EN=  0048D8     |     DEVID_LO=  0048D2 
    DEVID_LO=  0048D3     |     DEVID_LO=  0048D4     |     DEVID_LO=  0048D5 
    DEVID_LO=  0048D6     |     DEVID_LO=  0048D7     |     DEVID_LO=  0048D8 
    DEVID_WA=  0048D1     |     DEVID_XH=  0048CE     |     DEVID_XL=  0048CD 
    DEVID_YH=  0048D0     |     DEVID_YL=  0048CF     |     DLE     =  000010 
    DM_BK1RE=  007F90     |     DM_BK1RH=  007F91     |     DM_BK1RL=  007F92 
    DM_BK2RE=  007F93     |     DM_BK2RH=  007F94     |     DM_BK2RL=  007F95 
    DM_CR1  =  007F96     |     DM_CR2  =  007F97     |     DM_CSR1 =  007F98 
    DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A     |   6 EEPROG_t   0002A3 R
    EEPROM_B=  004000     |     EEPROM_C=  00500A     |     EEPROM_E=  0047FF 
    EEPROM_N=  000001     |     EEPROM_N=  000002     |     EEPROM_N=  000003 
    EEPROM_P=  000040     |     EEPROM_S=  000800     |     EM      =  000019 
    ENQ     =  000005     |     EOF     =  00001A     |     EOT     =  000004 
    ERASE   =  000003     |     ESC     =  00001B     |     ETB     =  000017 
    ETX     =  000003     |     EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1 
    FF      =  00000C     |     FHSE    =  7A1200     |     FHSI    =  F42400 
    FLASH_BA=  008000     |     FLASH_CR=  00505A     |     FLASH_CR=  000002 
    FLASH_CR=  000000     |     FLASH_CR=  000003     |     FLASH_CR=  000001 
    FLASH_CR=  00505B     |     FLASH_CR=  000005     |     FLASH_CR=  000004 
    FLASH_CR=  000007     |     FLASH_CR=  000000     |     FLASH_CR=  000006 
    FLASH_DU=  005064     |     FLASH_DU=  0000AE     |     FLASH_DU=  000056 
    FLASH_EN=  027FFF     |     FLASH_FP=  00505D     |     FLASH_FP=  000000 
    FLASH_FP=  000001     |     FLASH_FP=  000002     |     FLASH_FP=  000003 
    FLASH_FP=  000004     |     FLASH_FP=  000005     |     FLASH_IA=  00505F 
    FLASH_IA=  000003     |     FLASH_IA=  000002     |     FLASH_IA=  000006 
    FLASH_IA=  000001     |     FLASH_IA=  000000     |     FLASH_NC=  00505C 
    FLASH_NF=  00505E     |     FLASH_NF=  000000     |     FLASH_NF=  000001 
    FLASH_NF=  000002     |     FLASH_NF=  000003     |     FLASH_NF=  000004 
    FLASH_NF=  000005     |     FLASH_PU=  005062     |     FLASH_PU=  000056 
    FLASH_PU=  0000AE     |     FLASH_SI=  020000     |     FLASH_WS=  00480D 
    FLSI    =  01F400     |     FMSTR   =  000010     |     FS      =  00001C 
    FTIMER  =  000001     |     FUPPER  =  000000     |     GPIO_BAS=  005000 
    GPIO_CR1=  000003     |     GPIO_CR2=  000004     |     GPIO_DDR=  000002 
    GPIO_IDR=  000001     |     GPIO_ODR=  000000     |     GPIO_SIZ=  000005 
    GS      =  00001D     |     HI_LL   =  000001     |     HSECNT  =  004809 
    I2C_BASE=  005210     |     I2C_CCRH=  00521C     |     I2C_CCRH=  000080 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]

Symbol Table

    I2C_CCRH=  0000C0     |     I2C_CCRH=  000080     |     I2C_CCRH=  000000 
    I2C_CCRH=  000001     |     I2C_CCRH=  000000     |     I2C_CCRH=  000006 
    I2C_CCRH=  000007     |     I2C_CCRL=  00521B     |     I2C_CCRL=  00001A 
    I2C_CCRL=  000002     |     I2C_CCRL=  00000D     |     I2C_CCRL=  000050 
    I2C_CCRL=  000090     |     I2C_CCRL=  0000A0     |     I2C_CR1 =  005210 
    I2C_CR1_=  000006     |     I2C_CR1_=  000007     |     I2C_CR1_=  000000 
    I2C_CR2 =  005211     |     I2C_CR2_=  000002     |     I2C_CR2_=  000003 
    I2C_CR2_=  000000     |     I2C_CR2_=  000001     |     I2C_CR2_=  000007 
    I2C_DR  =  005216     |     I2C_FREQ=  005212     |     I2C_ITR =  00521A 
    I2C_ITR_=  000002     |     I2C_ITR_=  000000     |     I2C_ITR_=  000001 
    I2C_OARH=  005214     |     I2C_OARH=  000001     |     I2C_OARH=  000002 
    I2C_OARH=  000006     |     I2C_OARH=  000007     |     I2C_OARL=  005213 
    I2C_OARL=  000000     |     I2C_OAR_=  000813     |     I2C_OAR_=  000009 
    I2C_PECR=  00521E     |     I2C_READ=  000001     |     I2C_SR1 =  005217 
    I2C_SR1_=  000003     |     I2C_SR1_=  000001     |     I2C_SR1_=  000002 
    I2C_SR1_=  000006     |     I2C_SR1_=  000000     |     I2C_SR1_=  000004 
    I2C_SR1_=  000007     |     I2C_SR2 =  005218     |     I2C_SR2_=  000002 
    I2C_SR2_=  000001     |     I2C_SR2_=  000000     |     I2C_SR2_=  000003 
    I2C_SR2_=  000005     |     I2C_SR3 =  005219     |     I2C_SR3_=  000001 
    I2C_SR3_=  000007     |     I2C_SR3_=  000004     |     I2C_SR3_=  000000 
    I2C_SR3_=  000002     |     I2C_TRIS=  00521D     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_WRIT=  000000 
    INPUT_DI=  000000     |     INPUT_EI=  000001     |     INPUT_FL=  000000 
    INPUT_PU=  000001     |     INT_ADC2=  000016     |     INT_AUAR=  000012 
    INT_AWU =  000001     |     INT_CAN_=  000008     |     INT_CAN_=  000009 
    INT_CLK =  000002     |     INT_EXTI=  000003     |     INT_EXTI=  000004 
    INT_EXTI=  000005     |     INT_EXTI=  000006     |     INT_EXTI=  000007 
    INT_FLAS=  000018     |     INT_I2C =  000013     |     INT_SPI =  00000A 
    INT_TIM1=  00000C     |     INT_TIM1=  00000B     |     INT_TIM2=  00000E 
    INT_TIM2=  00000D     |     INT_TIM3=  000010     |     INT_TIM3=  00000F 
    INT_TIM4=  000017     |     INT_TLI =  000000     |     INT_UART=  000011 
    INT_UART=  000015     |     INT_UART=  000014     |     INT_VECT=  008060 
    INT_VECT=  00800C     |     INT_VECT=  008028     |     INT_VECT=  00802C 
    INT_VECT=  008010     |     INT_VECT=  008014     |     INT_VECT=  008018 
    INT_VECT=  00801C     |     INT_VECT=  008020     |     INT_VECT=  008024 
    INT_VECT=  008068     |     INT_VECT=  008054     |     INT_VECT=  008000 
    INT_VECT=  008030     |     INT_VECT=  008038     |     INT_VECT=  008034 
    INT_VECT=  008040     |     INT_VECT=  00803C     |     INT_VECT=  008048 
    INT_VECT=  008044     |     INT_VECT=  008064     |     INT_VECT=  008008 
    INT_VECT=  008004     |     INT_VECT=  008050     |     INT_VECT=  00804C 
    INT_VECT=  00805C     |     INT_VECT=  008058     |     ITC_SPR1=  007F70 
    ITC_SPR2=  007F71     |     ITC_SPR3=  007F72     |     ITC_SPR4=  007F73 
    ITC_SPR5=  007F74     |     ITC_SPR6=  007F75     |     ITC_SPR7=  007F76 
    ITC_SPR8=  007F77     |     ITC_SPR_=  000001     |     ITC_SPR_=  000000 
    ITC_SPR_=  000003     |     IWDG_KEY=  000055     |     IWDG_KEY=  0000CC 
    IWDG_KEY=  0000AA     |     IWDG_KR =  0050E0     |     IWDG_PR =  0050E1 
    IWDG_RLR=  0050E2     |     LED_BIT =  000005     |     LED_MASK=  000020 
    LED_PORT=  00500A     |     LEN     =  000002     |     LF      =  00000A 
    LN_LEN  =  000002     |     MAJOR   =  000001     |     MAX_LEN =  00004F 
    MINOR   =  000000     |     NAFR    =  004804     |     NAK     =  000015 
    NCLKOPT =  004808     |     NFLASH_W=  00480E     |     NHSECNT =  00480A 
    NOP     =  000000     |     NOPT1   =  004802     |     NOPT2   =  004804 
    NOPT3   =  004806     |     NOPT4   =  004808     |     NOPT5   =  00480A 
    NOPT6   =  00480C     |     NOPT7   =  00480E     |     NOPTBL  =  00487F 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]

Symbol Table

    NUBC    =  004802     |     NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD 
    NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE 
  6 NonHandl   000000 R   |     OFS_UART=  000002     |     OFS_UART=  000003 
    OFS_UART=  000004     |     OFS_UART=  000005     |     OFS_UART=  000006 
    OFS_UART=  000007     |     OFS_UART=  000008     |     OFS_UART=  000009 
    OFS_UART=  000001     |     OFS_UART=  000009     |     OFS_UART=  00000A 
    OFS_UART=  000000     |     OPT0    =  004800     |     OPT1    =  004801 
    OPT2    =  004803     |     OPT3    =  004805     |     OPT4    =  004807 
    OPT5    =  004809     |     OPT6    =  00480B     |     OPT7    =  00480D 
    OPTBL   =  00487E     |     OPTION_B=  004800     |     OPTION_E=  00487F 
    OPTION_S=  000080     |     OUTPUT_F=  000001     |     OUTPUT_O=  000000 
    OUTPUT_P=  000001     |     OUTPUT_S=  000000     |     PA      =  000000 
    PAD_SIZE=  000040     |     PAGE_CNT=  000001     |     PA_BASE =  005000 
    PA_CR1  =  005003     |     PA_CR2  =  005004     |     PA_DDR  =  005002 
    PA_IDR  =  005001     |     PA_ODR  =  005000     |     PB      =  000005 
    PB_BASE =  005005     |     PB_CR1  =  005008     |     PB_CR2  =  005009 
    PB_DDR  =  005007     |     PB_IDR  =  005006     |     PB_ODR  =  005005 
    PC      =  00000A     |     PC_BASE =  00500A     |     PC_CR1  =  00500D 
    PC_CR2  =  00500E     |     PC_DDR  =  00500C     |     PC_IDR  =  00500B 
    PC_ODR  =  00500A     |     PD      =  00000F     |     PD_BASE =  00500F 
    PD_CR1  =  005012     |     PD_CR2  =  005013     |     PD_DDR  =  005011 
    PD_IDR  =  005010     |     PD_ODR  =  00500F     |     PE      =  000014 
    PE_BASE =  005014     |     PE_CR1  =  005017     |     PE_CR2  =  005018 
    PE_DDR  =  005016     |     PE_IDR  =  005015     |     PE_ODR  =  005014 
    PF      =  000019     |     PF_BASE =  005019     |     PF_CR1  =  00501C 
    PF_CR2  =  00501D     |     PF_DDR  =  00501B     |     PF_IDR  =  00501A 
    PF_ODR  =  005019     |     PG      =  00001E     |     PG_BASE =  00501E 
    PG_CR1  =  005021     |     PG_CR2  =  005022     |     PG_DDR  =  005020 
    PG_IDR  =  00501F     |     PG_ODR  =  00501E     |     PH      =  000023 
    PH_BASE =  005023     |     PH_CR1  =  005026     |     PH_CR2  =  005027 
    PH_DDR  =  005025     |     PH_IDR  =  005024     |     PH_ODR  =  005023 
    PI      =  000028     |     PI_BASE =  005028     |     PI_CR1  =  00502B 
    PI_CR2  =  00502C     |     PI_DDR  =  00502A     |     PI_IDR  =  005029 
    PI_ODR  =  005028     |     RAM_BASE=  000000     |     RAM_END =  0017FF 
    RAM_SIZE=  001800     |     READ    =  000001     |     REV     =  000000 
    ROP     =  004800     |     ROW_SIZE=  000001     |     RS      =  00001E 
    RST_SR  =  0050B3     |     RX_QUEUE=  000020 G   |     SEMIC   =  00003B 
    SFR_BASE=  005000     |     SFR_END =  0057FF     |     SHARP   =  000023 
    SI      =  00000F     |     SIGN    =  000001     |     SO      =  00000E 
    SOH     =  000001     |     SPACE   =  000020     |     SPI_CR1 =  005200 
    SPI_CR1_=  000003     |     SPI_CR1_=  000000     |     SPI_CR1_=  000001 
    SPI_CR1_=  000007     |     SPI_CR1_=  000002     |     SPI_CR1_=  000006 
    SPI_CR2 =  005201     |     SPI_CR2_=  000007     |     SPI_CR2_=  000006 
    SPI_CR2_=  000005     |     SPI_CR2_=  000004     |     SPI_CR2_=  000002 
    SPI_CR2_=  000000     |     SPI_CR2_=  000001     |     SPI_CRCP=  005205 
    SPI_DR  =  005204     |     SPI_ICR =  005202     |     SPI_RXCR=  005206 
    SPI_SR  =  005203     |     SPI_SR_B=  000007     |     SPI_SR_C=  000004 
    SPI_SR_M=  000005     |     SPI_SR_O=  000006     |     SPI_SR_R=  000000 
    SPI_SR_T=  000001     |     SPI_SR_W=  000003     |     SPI_TXCR=  005207 
    STACK_EM=  0017FF     |     STACK_SI=  000080     |     STORE   =  000002 
    STX     =  000002     |     SUB     =  00001A     |     SWIM_CSR=  007F80 
    SYN     =  000016     |     TAB     =  000009     |     TIB_SIZE=  000080 
    TICK    =  000027     |     TIM1_ARR=  005262     |     TIM1_ARR=  005263 
    TIM1_BKR=  00526D     |     TIM1_CCE=  00525C     |     TIM1_CCE=  00525D 
    TIM1_CCM=  005258     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  005259     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525A     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525B     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCR=  005265     |     TIM1_CCR=  005266     |     TIM1_CCR=  005267 
    TIM1_CCR=  005268     |     TIM1_CCR=  005269     |     TIM1_CCR=  00526A 
    TIM1_CCR=  00526B     |     TIM1_CCR=  00526C     |     TIM1_CNT=  00525E 
    TIM1_CNT=  00525F     |     TIM1_CR1=  005250     |     TIM1_CR2=  005251 
    TIM1_CR2=  000000     |     TIM1_CR2=  000002     |     TIM1_CR2=  000004 
    TIM1_CR2=  000005     |     TIM1_CR2=  000006     |     TIM1_DTR=  00526E 
    TIM1_EGR=  005257     |     TIM1_EGR=  000007     |     TIM1_EGR=  000001 
    TIM1_EGR=  000002     |     TIM1_EGR=  000003     |     TIM1_EGR=  000004 
    TIM1_EGR=  000005     |     TIM1_EGR=  000006     |     TIM1_EGR=  000000 
    TIM1_ETR=  005253     |     TIM1_ETR=  000006     |     TIM1_ETR=  000000 
    TIM1_ETR=  000001     |     TIM1_ETR=  000002     |     TIM1_ETR=  000003 
    TIM1_ETR=  000007     |     TIM1_ETR=  000004     |     TIM1_ETR=  000005 
    TIM1_IER=  005254     |     TIM1_IER=  000007     |     TIM1_IER=  000001 
    TIM1_IER=  000002     |     TIM1_IER=  000003     |     TIM1_IER=  000004 
    TIM1_IER=  000005     |     TIM1_IER=  000006     |     TIM1_IER=  000000 
    TIM1_OIS=  00526F     |     TIM1_PSC=  005260     |     TIM1_PSC=  005261 
    TIM1_RCR=  005264     |     TIM1_SMC=  005252     |     TIM1_SMC=  000007 
    TIM1_SMC=  000000     |     TIM1_SMC=  000001     |     TIM1_SMC=  000002 
    TIM1_SMC=  000004     |     TIM1_SMC=  000005     |     TIM1_SMC=  000006 
    TIM1_SR1=  005255     |     TIM1_SR1=  000007     |     TIM1_SR1=  000001 
    TIM1_SR1=  000002     |     TIM1_SR1=  000003     |     TIM1_SR1=  000004 
    TIM1_SR1=  000005     |     TIM1_SR1=  000006     |     TIM1_SR1=  000000 
    TIM1_SR2=  005256     |     TIM1_SR2=  000001     |     TIM1_SR2=  000002 
    TIM1_SR2=  000003     |     TIM1_SR2=  000004     |     TIM2_ARR=  00530D 
    TIM2_ARR=  00530E     |     TIM2_CCE=  005308     |     TIM2_CCE=  000000 
    TIM2_CCE=  000001     |     TIM2_CCE=  000004     |     TIM2_CCE=  000005 
    TIM2_CCE=  005309     |     TIM2_CCM=  005305     |     TIM2_CCM=  005306 
    TIM2_CCM=  005307     |     TIM2_CCM=  000000     |     TIM2_CCM=  000004 
    TIM2_CCM=  000003     |     TIM2_CCR=  00530F     |     TIM2_CCR=  005310 
    TIM2_CCR=  005311     |     TIM2_CCR=  005312     |     TIM2_CCR=  005313 
    TIM2_CCR=  005314     |     TIM2_CLK=  00F424     |     TIM2_CNT=  00530A 
    TIM2_CNT=  00530B     |     TIM2_CR1=  005300     |     TIM2_CR1=  000007 
    TIM2_CR1=  000000     |     TIM2_CR1=  000003     |     TIM2_CR1=  000001 
    TIM2_CR1=  000002     |     TIM2_EGR=  005304     |     TIM2_EGR=  000001 
    TIM2_EGR=  000002     |     TIM2_EGR=  000003     |     TIM2_EGR=  000006 
    TIM2_EGR=  000000     |     TIM2_IER=  005301     |     TIM2_PSC=  00530C 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]

Symbol Table

    TIM2_SR1=  005302     |     TIM2_SR2=  005303     |     TIM3_ARR=  00532B 
    TIM3_ARR=  00532C     |     TIM3_CCE=  005327     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCE=  000004     |     TIM3_CCE=  000005 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCM=  005325 
    TIM3_CCM=  005326     |     TIM3_CCM=  000000     |     TIM3_CCM=  000004 
    TIM3_CCM=  000003     |     TIM3_CCR=  00532D     |     TIM3_CCR=  00532E 
    TIM3_CCR=  00532F     |     TIM3_CCR=  005330     |     TIM3_CNT=  005328 
    TIM3_CNT=  005329     |     TIM3_CR1=  005320     |     TIM3_CR1=  000007 
    TIM3_CR1=  000000     |     TIM3_CR1=  000003     |     TIM3_CR1=  000001 
    TIM3_CR1=  000002     |     TIM3_EGR=  005324     |     TIM3_IER=  005321 
    TIM3_PSC=  00532A     |     TIM3_SR1=  005322     |     TIM3_SR2=  005323 
    TIM4_ARR=  005346     |     TIM4_CNT=  005344     |     TIM4_CR1=  005340 
    TIM4_CR1=  000007     |     TIM4_CR1=  000000     |     TIM4_CR1=  000003 
    TIM4_CR1=  000001     |     TIM4_CR1=  000002     |     TIM4_EGR=  005343 
    TIM4_EGR=  000000     |     TIM4_IER=  005341     |     TIM4_IER=  000000 
    TIM4_PSC=  005345     |     TIM4_PSC=  000000     |     TIM4_PSC=  000007 
    TIM4_PSC=  000004     |     TIM4_PSC=  000001     |     TIM4_PSC=  000005 
    TIM4_PSC=  000002     |     TIM4_PSC=  000006     |     TIM4_PSC=  000003 
    TIM4_PSC=  000000     |     TIM4_PSC=  000001     |     TIM4_PSC=  000002 
    TIM4_SR =  005342     |     TIM4_SR_=  000000     |     TIM_CR1_=  000007 
    TIM_CR1_=  000000     |     TIM_CR1_=  000006     |     TIM_CR1_=  000005 
    TIM_CR1_=  000004     |     TIM_CR1_=  000003     |     TIM_CR1_=  000001 
    TIM_CR1_=  000002     |   6 Timer4Up   000004 R   |     UART    =  000000 
    UART1   =  000000     |     UART1_BA=  005230     |     UART1_BR=  005232 
    UART1_BR=  005233     |     UART1_CR=  005234     |     UART1_CR=  005235 
    UART1_CR=  005236     |     UART1_CR=  005237     |     UART1_CR=  005238 
    UART1_DR=  005231     |     UART1_GT=  005239     |     UART1_PO=  000000 
    UART1_PS=  00523A     |     UART1_RX=  000004     |     UART1_SR=  005230 
    UART1_TX=  000005     |     UART2   =  000001     |     UART3   =  000002 
    UART3_BA=  005240     |     UART3_BR=  005242     |     UART3_BR=  005243 
    UART3_CR=  005244     |     UART3_CR=  005245     |     UART3_CR=  005246 
    UART3_CR=  005247     |     UART3_CR=  004249     |     UART3_DR=  005241 
    UART3_PO=  00000F     |     UART3_RX=  000006     |     UART3_SR=  005240 
    UART3_TX=  000005     |     UART_BRR=  005232     |     UART_BRR=  005233 
    UART_CR1=  005234     |     UART_CR1=  000004     |     UART_CR1=  000002 
    UART_CR1=  000000     |     UART_CR1=  000001     |     UART_CR1=  000007 
    UART_CR1=  000006     |     UART_CR1=  000005     |     UART_CR1=  000003 
    UART_CR2=  005235     |     UART_CR2=  000004     |     UART_CR2=  000002 
    UART_CR2=  000005     |     UART_CR2=  000001     |     UART_CR2=  000000 
    UART_CR2=  000006     |     UART_CR2=  000003     |     UART_CR2=  000007 
    UART_CR3=  000003     |     UART_CR3=  000001     |     UART_CR3=  000002 
    UART_CR3=  000000     |     UART_CR3=  000006     |     UART_CR3=  000004 
    UART_CR3=  000005     |     UART_CR4=  000000     |     UART_CR4=  000001 
    UART_CR4=  000002     |     UART_CR4=  000003     |     UART_CR4=  000004 
    UART_CR4=  000006     |     UART_CR4=  000005     |     UART_CR5=  000003 
    UART_CR5=  000001     |     UART_CR5=  000002     |     UART_CR5=  000004 
    UART_CR5=  000005     |     UART_CR6=  000004     |     UART_CR6=  000007 
    UART_CR6=  000001     |     UART_CR6=  000002     |     UART_CR6=  000000 
    UART_CR6=  000005     |     UART_DR =  005231     |     UART_PCK=  000002 
    UART_POR=  005003     |     UART_POR=  005004     |     UART_POR=  005002 
    UART_POR=  005001     |     UART_POR=  005000     |     UART_RX_=  000004 
    UART_SR =  005230     |     UART_SR_=  000001     |     UART_SR_=  000004 
    UART_SR_=  000002     |     UART_SR_=  000003     |     UART_SR_=  000000 
    UART_SR_=  000005     |     UART_SR_=  000006     |     UART_SR_=  000007 
    UART_TX_=  000005     |     UBC     =  004801     |     US      =  00001F 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]

Symbol Table

  6 UartRxHa   00009F R   |     VSIZE   =  000002     |     VT      =  00000B 
    WDGOPT  =  004805     |     WDGOPT_I=  000002     |     WDGOPT_L=  000003 
    WDGOPT_W=  000000     |     WDGOPT_W=  000001     |     WWDG_CR =  0050D1 
    WWDG_WR =  0050D2     |     XOFF    =  000013     |     XON     =  000011 
  5 base       000000 GR  |   6 bksp       000121 GR  |   6 clear_qu   0000DA R
  6 cli        000305 R   |   6 clr_scre   000139 GR  |   6 cold_sta   00005D R
  6 eeProg     0002D6 R   |   6 eeprom_a   00048A R   |   6 erase_ra   0004F2 R
  6 exam_blo   0003AC R   |   5 farptr     000007 R   |   5 flags      00000A GR
  5 fmstr      000001 GR  |   6 getc       0000EE GR  |   6 init_por   000264 R
  6 itoa       000202 GR  |   6 itoa_loo   000227 R   |   5 last       000032 R
  5 mode       00002D R   |   6 new_line   000133 GR  |   6 new_row    0003C0 R
  6 next_cha   000319 R   |   2 pad        001740 GR  |   6 parse01    00032B R
  6 parse_he   0003E5 R   |   6 print_ad   000416 R   |   6 print_de   0001CA R
  6 print_he   0001BA GR  |   6 print_in   0001F1 GR  |   6 print_me   00042A R
  6 print_wo   000421 R   |   6 prog_eep   000437 R   |   6 prt_digi   0001E9 R
  6 prt_i8     0001EF R   |   5 ptr16      000008 GR  |   5 ptr8       000009 R
  6 putc       0000DF GR  |   6 puts       000116 GR  |   6 qgetc      0000E8 GR
  6 readln     000156 GR  |   6 row        0003C7 R   |   5 rx1_head   00000B GR
  5 rx1_queu   00000D GR  |   5 rx1_tail   00000C GR  |   6 space      000144 GR
  6 spaces     00014A GR  |   2 stack_fu   001780 GR  |   2 stack_un   001800 R
  5 storadr    000030 R   |   6 strlen     000532 R   |   2 tib        0016C0 R
  5 ticks      000002 R   |   5 timer      000005 GR  |   6 timer4_i   000029 R
  6 to_hex_c   0001AF GR  |   6 to_upper   000259 R   |   6 uart_bks   000121 GR
  6 uart_get   0000EE GR  |   6 uart_ini   0000BB R   |   6 uart_put   0000DF GR
  6 uart_qge   0000E8 GR  |   2 write_bu   001740 GR  |   6 write_ee   00037A R
  6 write_st   000495 R   |   5 xamadr     00002E R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 SSEG       size      0   flags    8
   2 SSEG0      size    140   flags    8
   3 HOME       size     80   flags    0
   4 DATA       size      0   flags    8
   5 DATA1      size     34   flags    8
   6 CODE       size    53D   flags    0

